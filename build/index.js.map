{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/MunkerIllusion.jsx","webpack:///(webpack)/buildin/module.js","webpack:///./node_modules/chroma-js/chroma.js","webpack:///external \"react\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","_react","MunkerIllusion","props","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","myRef","React","createRef","widthRef","lightnessRef","widthChange","bind","lightnessChange","scaleBackground","chroma","scale","correctLightness","scaleBar","width","height","Component","go","event","current","console","log","y","lightness","Number","backgroundColor","hex","barColor","svg","innerHTML","style","background","line","document","createElementNS","setAttribute","appendChild","cline1","cline2","_react2","default","createElement","type","ref","min","max","defaultValue","onInput","onChange","step","display","margin","webpackPolyfill","deprecate","paths","children","Color","DEG2RAD","LAB_CONSTANTS","PI","PITHIRD","RAD2DEG","TWOPI","_average_lrgb","_guess_formats","_guess_formats_sorted","_input","_interpolators","abs","atan2","bezier","blend","blend_f","brewer","burn","clip_rgb","cmyk2rgb","cos","css2rgb","darken","dodge","each","floor","hcg2rgb","hex2rgb","hsi2rgb","hsl2css","hsl2rgb","hsv2rgb","interpolate","interpolate_hsx","interpolate_lab","interpolate_lrgb","interpolate_num","interpolate_rgb","lab2lch","lab2rgb","lab_xyz","lch2lab","lch2rgb","lighten","limit","luminance_x","multiply","num2rgb","overlay","pow","rgb2cmyk","rgb2css","rgb2hcg","rgb2hex","rgb2hsi","rgb2hsl","rgb2hsv","rgb2lab","rgb2lch","rgb2luminance","rgb2num","rgb2temperature","rgb2xyz","rgb_xyz","rnd","round","screen","sin","sqrt","temperature2rgb","unpack","w3cx11","xyz_lab","xyz_rgb","slice","classToType","len","split","length","toLowerCase","obj","strType","toString","x","args","Array","rgb","_clipped","_unclipped","Math","arguments","func","ctor","child","result","apply","undefined","__WEBPACK_AMD_DEFINE_RESULT__","version","arg","chk","len1","me","mode","w","push","_rgb","sort","a","b","test","warn","clone","OrRd","PuBu","BuPu","Oranges","BuGn","YlOrBr","YlGn","Reds","RdPu","Greens","YlGnBu","Purples","GnBu","Greys","YlOrRd","PuRd","Blues","PuBuGn","Viridis","Spectral","RdYlGn","RdBu","PiYG","PRGn","RdYlBu","BrBG","RdGy","PuOr","Set2","Accent","Set1","Set3","Dark2","Paired","Pastel2","Pastel1","key","results","colors","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflower","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","laserlemon","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrod","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","maroon2","maroon3","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","purple2","purple3","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","z","isNaN","Yn","Xn","Zn","t","t1","t2","t0","Kn","t3","g","ref1","lab","concat","I","I0","I1","lab0","lab1","lab2","lab3","ref2","f","cubehelix","start","rotations","hue","gamma","dh","dl","fract","amp","cos_a","sin_a","h","random","code","charAt","col1","col2","interpol","res","alpha","mix","k","v","map","rgba","lrgb","xyz0","xyz1","xyz","average","A","cnt","dx","dy","first","xyz2","splice","u","match","substr","parseInt","css","channels","hxa","str","NaN","hsl","q","ref3","ref4","ref5","delta","hsv","num","_c","_g","hcg","aa","ab","join","named","L","lch","hcl","reverse","cmyk","gl","luminance","lum","cur_lum","eps","max_iter","lm","kelvin","temp","maxTemp","minTemp","temperature","K","contrast","l1","l2","distance","sum_sq","deltaE","C","L1","L2","a1","a2","b1","b2","c1","c2","c4","delA","delB","delC","h1","sc","sl","v1","v2","v3","modechan","channel","src","indexOf","set","clipped","amount","brighten","darker","brighter","saturate","desaturate","premultiply","bottom","top","normal","c0","out","analyze","data","val","MAX_VALUE","sum","values","count","domain","limits","positions","_classes","_colorCache","_colors","_correctLightness","_domain","_gamma","_max","_min","_mode","_nacol","_out","_padding","_pos","_spread","_useCache","getClass","getColor","resetCache","setColors","tmap","col","maxc","minc","bypassMap","classes","_m","range","_o","spread","L0","L_actual","L_diff","L_ideal","pol","padding","numColors","dd","dm","samples","cache","scales","cool","hot","filter","add","visit","ac","ad","ae","af","ag","ah","ai","aj","ak","al","am","assignments","best","centroids","cluster","clusterSizes","dist","j","kClusters","max_log","min_log","mindist","nb_iters","newCentroids","pb","pr","ref10","ref11","ref12","ref13","ref14","ref6","ref7","ref8","ref9","repeat","tmpKMeansBreaks","LOG10E","acos","hsi","hue0","hue1","lbv0","lbv1","sat","sat0","sat1","n1","n2","require"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import React, {Component} from 'react';\nimport chroma from 'chroma-js';\n\nclass MunkerIllusion extends Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n    this.widthRef = React.createRef();\n    this.lightnessRef = React.createRef();\n\n    this.widthChange = this.widthChange.bind(this);\n    this.lightnessChange = this.lightnessChange.bind(this);\n\n    this.scaleBackground = chroma.scale(['blue', 'white']).correctLightness();\n    this.scaleBar = chroma.scale(['yellow', 'white']).correctLightness();\n\n    this.width=350;\n    this.height=200;\n  }\n\n  componentDidMount() {\n    this.go();\n  }\n\n  widthChange(event) {\n    let value = this.widthRef.current.value;\n    console.log('Boom Chuggg ... ' + value);\n    this.go();\n  }\n  \n  lightnessChange(event) {\n    let value = this.lightnessRef.current.value;\n    console.log('ligtness = ' + value);\n    this.go();\n  }\n\n  go() {\n    let lightness = Number(this.lightnessRef.current.value);\n    let width = Number(this.widthRef.current.value);\n\n    let backgroundColor = this.scaleBackground(lightness).hex();\n    let barColor = this.scaleBar(lightness).hex();\n    let objColor = 'red';\n\n    let svg = this.myRef.current;\n    svg.innerHTML = '';\n    svg.style.background = backgroundColor;\n\n    var y;\n\n\n    for (y=width/2; y<=this.height+width; y+=width*2) {\n      let line = document.createElementNS('http://www.w3.org/2000/svg',\n                                          'line');\n      \n      line.setAttribute('x1', 0);\n      line.setAttribute('y1', y);\n      line.setAttribute('x2', this.width);\n      line.setAttribute('y2', y);\n      \n      line.setAttribute('stroke', barColor);\n      line.setAttribute('stroke-width', width);\n      svg.appendChild(line);\n      \n      if (y > 50 && y < 150) {\n        let cline1 = document.createElementNS('http://www.w3.org/2000/svg',\n                                              'line');\n\n        cline1.setAttribute('x1', 50);\n        cline1.setAttribute('y1', y);\n        cline1.setAttribute('x2', 150);\n        cline1.setAttribute('y2', y);\n        \n        cline1.setAttribute('stroke', objColor);\n        cline1.setAttribute('stroke-width', width);        \n        \n        svg.appendChild(cline1);        \n\n        let cline2 = document.createElementNS('http://www.w3.org/2000/svg',\n                                              'line');\n\n        cline2.setAttribute('x1', 200);\n        cline2.setAttribute('y1', y+width);\n        cline2.setAttribute('x2', 300);\n        cline2.setAttribute('y2', y+width);\n        \n        cline2.setAttribute('stroke', objColor);\n        cline2.setAttribute('stroke-width', width);        \n        \n        let yy = y+width;\n        svg.appendChild(cline2);        \n      }\n\n    }\n\n    console.log('BOOM chugaluga');\n  }\n\n  render() {\n    console.log('render render render');\n    return (\n      <div>\n        <label>Grating Width</label>\n        <input type=\"range\" ref={this.widthRef} \n               min=\"1\" max=\"50\" defaultValue=\"6\"\n               onInput={this.widthChange}  onChange={this.widthChange}/>\n        <br/>\n        <label>Grating Lightness</label>\n        <input type=\"range\" ref={this.lightnessRef} \n               min=\"0\" max=\"1\" step=\"0.01\" defaultValue=\"0\"              \n               onInput={this.lightnessChange} onChange={this.lightnessChange}/>\n\n        \n        <svg width={this.width} height={this.height} ref={this.myRef}\n             style={{display: 'block', margin: 'auto'}}>\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default MunkerIllusion;\n","module.exports = function(module) {\r\n\tif (!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif (!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n","\n/**\n * @license\n *\n * chroma.js - JavaScript library for color conversions\n * \n * Copyright (c) 2011-2017, Gregor Aisch\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * \n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n * \n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n * \n * 3. The name Gregor Aisch may not be used to endorse or promote products\n *    derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n */\n\n(function() {\n  var Color, DEG2RAD, LAB_CONSTANTS, PI, PITHIRD, RAD2DEG, TWOPI, _average_lrgb, _guess_formats, _guess_formats_sorted, _input, _interpolators, abs, atan2, bezier, blend, blend_f, brewer, burn, chroma, clip_rgb, cmyk2rgb, colors, cos, css2rgb, darken, dodge, each, floor, hcg2rgb, hex2rgb, hsi2rgb, hsl2css, hsl2rgb, hsv2rgb, interpolate, interpolate_hsx, interpolate_lab, interpolate_lrgb, interpolate_num, interpolate_rgb, lab2lch, lab2rgb, lab_xyz, lch2lab, lch2rgb, lighten, limit, log, luminance_x, m, max, multiply, normal, num2rgb, overlay, pow, rgb2cmyk, rgb2css, rgb2hcg, rgb2hex, rgb2hsi, rgb2hsl, rgb2hsv, rgb2lab, rgb2lch, rgb2luminance, rgb2num, rgb2temperature, rgb2xyz, rgb_xyz, rnd, root, round, screen, sin, sqrt, temperature2rgb, type, unpack, w3cx11, xyz_lab, xyz_rgb,\n    slice = [].slice;\n\n  type = (function() {\n\n    /*\n    for browser-safe type checking+\n    ported from jQuery's $.type\n     */\n    var classToType, len, name, o, ref;\n    classToType = {};\n    ref = \"Boolean Number String Function Array Date RegExp Undefined Null\".split(\" \");\n    for (o = 0, len = ref.length; o < len; o++) {\n      name = ref[o];\n      classToType[\"[object \" + name + \"]\"] = name.toLowerCase();\n    }\n    return function(obj) {\n      var strType;\n      strType = Object.prototype.toString.call(obj);\n      return classToType[strType] || \"object\";\n    };\n  })();\n\n  limit = function(x, min, max) {\n    if (min == null) {\n      min = 0;\n    }\n    if (max == null) {\n      max = 1;\n    }\n    if (x < min) {\n      x = min;\n    }\n    if (x > max) {\n      x = max;\n    }\n    return x;\n  };\n\n  unpack = function(args) {\n    if (args.length >= 3) {\n      return Array.prototype.slice.call(args);\n    } else {\n      return args[0];\n    }\n  };\n\n  clip_rgb = function(rgb) {\n    var i, o;\n    rgb._clipped = false;\n    rgb._unclipped = rgb.slice(0);\n    for (i = o = 0; o < 3; i = ++o) {\n      if (i < 3) {\n        if (rgb[i] < 0 || rgb[i] > 255) {\n          rgb._clipped = true;\n        }\n        if (rgb[i] < 0) {\n          rgb[i] = 0;\n        }\n        if (rgb[i] > 255) {\n          rgb[i] = 255;\n        }\n      } else if (i === 3) {\n        if (rgb[i] < 0) {\n          rgb[i] = 0;\n        }\n        if (rgb[i] > 1) {\n          rgb[i] = 1;\n        }\n      }\n    }\n    if (!rgb._clipped) {\n      delete rgb._unclipped;\n    }\n    return rgb;\n  };\n\n  PI = Math.PI, round = Math.round, cos = Math.cos, floor = Math.floor, pow = Math.pow, log = Math.log, sin = Math.sin, sqrt = Math.sqrt, atan2 = Math.atan2, max = Math.max, abs = Math.abs;\n\n  TWOPI = PI * 2;\n\n  PITHIRD = PI / 3;\n\n  DEG2RAD = PI / 180;\n\n  RAD2DEG = 180 / PI;\n\n  chroma = function() {\n    if (arguments[0] instanceof Color) {\n      return arguments[0];\n    }\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, arguments, function(){});\n  };\n\n  chroma[\"default\"] = chroma;\n\n  _interpolators = [];\n\n  if ((typeof module !== \"undefined\" && module !== null) && (module.exports != null)) {\n    module.exports = chroma;\n  }\n\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return chroma;\n    });\n  } else {\n    root = typeof exports !== \"undefined\" && exports !== null ? exports : this;\n    root.chroma = chroma;\n  }\n\n  chroma.version = '1.3.7';\n\n  _input = {};\n\n  _guess_formats = [];\n\n  _guess_formats_sorted = false;\n\n  Color = (function() {\n    function Color() {\n      var arg, args, chk, len, len1, me, mode, o, w;\n      me = this;\n      args = [];\n      for (o = 0, len = arguments.length; o < len; o++) {\n        arg = arguments[o];\n        if (arg != null) {\n          args.push(arg);\n        }\n      }\n      if (args.length > 1) {\n        mode = args[args.length - 1];\n      }\n      if (_input[mode] != null) {\n        me._rgb = clip_rgb(_input[mode](unpack(args.slice(0, -1))));\n      } else {\n        if (!_guess_formats_sorted) {\n          _guess_formats = _guess_formats.sort(function(a, b) {\n            return b.p - a.p;\n          });\n          _guess_formats_sorted = true;\n        }\n        for (w = 0, len1 = _guess_formats.length; w < len1; w++) {\n          chk = _guess_formats[w];\n          mode = chk.test.apply(chk, args);\n          if (mode) {\n            break;\n          }\n        }\n        if (mode) {\n          me._rgb = clip_rgb(_input[mode].apply(_input, args));\n        }\n      }\n      if (me._rgb == null) {\n        console.warn('unknown format: ' + args);\n      }\n      if (me._rgb == null) {\n        me._rgb = [0, 0, 0];\n      }\n      if (me._rgb.length === 3) {\n        me._rgb.push(1);\n      }\n    }\n\n    Color.prototype.toString = function() {\n      return this.hex();\n    };\n\n    Color.prototype.clone = function() {\n      return chroma(me._rgb);\n    };\n\n    return Color;\n\n  })();\n\n  chroma._input = _input;\n\n\n  /**\n  \tColorBrewer colors for chroma.js\n  \n  \tCopyright (c) 2002 Cynthia Brewer, Mark Harrower, and The \n  \tPennsylvania State University.\n  \n  \tLicensed under the Apache License, Version 2.0 (the \"License\"); \n  \tyou may not use this file except in compliance with the License.\n  \tYou may obtain a copy of the License at\t\n  \thttp://www.apache.org/licenses/LICENSE-2.0\n  \n  \tUnless required by applicable law or agreed to in writing, software distributed\n  \tunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n  \tCONDITIONS OF ANY KIND, either express or implied. See the License for the\n  \tspecific language governing permissions and limitations under the License.\n  \n      @preserve\n   */\n\n  chroma.brewer = brewer = {\n    OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],\n    PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],\n    BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],\n    Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],\n    BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],\n    YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],\n    YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],\n    Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],\n    RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],\n    Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],\n    YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],\n    Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],\n    GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],\n    Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],\n    YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],\n    PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],\n    Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],\n    PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],\n    Viridis: ['#440154', '#482777', '#3f4a8a', '#31678e', '#26838f', '#1f9d8a', '#6cce5a', '#b6de2b', '#fee825'],\n    Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],\n    RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],\n    RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],\n    PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],\n    PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],\n    RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],\n    BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],\n    RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],\n    PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],\n    Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],\n    Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],\n    Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],\n    Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],\n    Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],\n    Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],\n    Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],\n    Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2']\n  };\n\n  (function() {\n    var key, results;\n    results = [];\n    for (key in brewer) {\n      results.push(brewer[key.toLowerCase()] = brewer[key]);\n    }\n    return results;\n  })();\n\n\n  /**\n  \tX11 color names\n  \n  \thttp://www.w3.org/TR/css3-color/#svg-color\n   */\n\n  w3cx11 = {\n    aliceblue: '#f0f8ff',\n    antiquewhite: '#faebd7',\n    aqua: '#00ffff',\n    aquamarine: '#7fffd4',\n    azure: '#f0ffff',\n    beige: '#f5f5dc',\n    bisque: '#ffe4c4',\n    black: '#000000',\n    blanchedalmond: '#ffebcd',\n    blue: '#0000ff',\n    blueviolet: '#8a2be2',\n    brown: '#a52a2a',\n    burlywood: '#deb887',\n    cadetblue: '#5f9ea0',\n    chartreuse: '#7fff00',\n    chocolate: '#d2691e',\n    coral: '#ff7f50',\n    cornflower: '#6495ed',\n    cornflowerblue: '#6495ed',\n    cornsilk: '#fff8dc',\n    crimson: '#dc143c',\n    cyan: '#00ffff',\n    darkblue: '#00008b',\n    darkcyan: '#008b8b',\n    darkgoldenrod: '#b8860b',\n    darkgray: '#a9a9a9',\n    darkgreen: '#006400',\n    darkgrey: '#a9a9a9',\n    darkkhaki: '#bdb76b',\n    darkmagenta: '#8b008b',\n    darkolivegreen: '#556b2f',\n    darkorange: '#ff8c00',\n    darkorchid: '#9932cc',\n    darkred: '#8b0000',\n    darksalmon: '#e9967a',\n    darkseagreen: '#8fbc8f',\n    darkslateblue: '#483d8b',\n    darkslategray: '#2f4f4f',\n    darkslategrey: '#2f4f4f',\n    darkturquoise: '#00ced1',\n    darkviolet: '#9400d3',\n    deeppink: '#ff1493',\n    deepskyblue: '#00bfff',\n    dimgray: '#696969',\n    dimgrey: '#696969',\n    dodgerblue: '#1e90ff',\n    firebrick: '#b22222',\n    floralwhite: '#fffaf0',\n    forestgreen: '#228b22',\n    fuchsia: '#ff00ff',\n    gainsboro: '#dcdcdc',\n    ghostwhite: '#f8f8ff',\n    gold: '#ffd700',\n    goldenrod: '#daa520',\n    gray: '#808080',\n    green: '#008000',\n    greenyellow: '#adff2f',\n    grey: '#808080',\n    honeydew: '#f0fff0',\n    hotpink: '#ff69b4',\n    indianred: '#cd5c5c',\n    indigo: '#4b0082',\n    ivory: '#fffff0',\n    khaki: '#f0e68c',\n    laserlemon: '#ffff54',\n    lavender: '#e6e6fa',\n    lavenderblush: '#fff0f5',\n    lawngreen: '#7cfc00',\n    lemonchiffon: '#fffacd',\n    lightblue: '#add8e6',\n    lightcoral: '#f08080',\n    lightcyan: '#e0ffff',\n    lightgoldenrod: '#fafad2',\n    lightgoldenrodyellow: '#fafad2',\n    lightgray: '#d3d3d3',\n    lightgreen: '#90ee90',\n    lightgrey: '#d3d3d3',\n    lightpink: '#ffb6c1',\n    lightsalmon: '#ffa07a',\n    lightseagreen: '#20b2aa',\n    lightskyblue: '#87cefa',\n    lightslategray: '#778899',\n    lightslategrey: '#778899',\n    lightsteelblue: '#b0c4de',\n    lightyellow: '#ffffe0',\n    lime: '#00ff00',\n    limegreen: '#32cd32',\n    linen: '#faf0e6',\n    magenta: '#ff00ff',\n    maroon: '#800000',\n    maroon2: '#7f0000',\n    maroon3: '#b03060',\n    mediumaquamarine: '#66cdaa',\n    mediumblue: '#0000cd',\n    mediumorchid: '#ba55d3',\n    mediumpurple: '#9370db',\n    mediumseagreen: '#3cb371',\n    mediumslateblue: '#7b68ee',\n    mediumspringgreen: '#00fa9a',\n    mediumturquoise: '#48d1cc',\n    mediumvioletred: '#c71585',\n    midnightblue: '#191970',\n    mintcream: '#f5fffa',\n    mistyrose: '#ffe4e1',\n    moccasin: '#ffe4b5',\n    navajowhite: '#ffdead',\n    navy: '#000080',\n    oldlace: '#fdf5e6',\n    olive: '#808000',\n    olivedrab: '#6b8e23',\n    orange: '#ffa500',\n    orangered: '#ff4500',\n    orchid: '#da70d6',\n    palegoldenrod: '#eee8aa',\n    palegreen: '#98fb98',\n    paleturquoise: '#afeeee',\n    palevioletred: '#db7093',\n    papayawhip: '#ffefd5',\n    peachpuff: '#ffdab9',\n    peru: '#cd853f',\n    pink: '#ffc0cb',\n    plum: '#dda0dd',\n    powderblue: '#b0e0e6',\n    purple: '#800080',\n    purple2: '#7f007f',\n    purple3: '#a020f0',\n    rebeccapurple: '#663399',\n    red: '#ff0000',\n    rosybrown: '#bc8f8f',\n    royalblue: '#4169e1',\n    saddlebrown: '#8b4513',\n    salmon: '#fa8072',\n    sandybrown: '#f4a460',\n    seagreen: '#2e8b57',\n    seashell: '#fff5ee',\n    sienna: '#a0522d',\n    silver: '#c0c0c0',\n    skyblue: '#87ceeb',\n    slateblue: '#6a5acd',\n    slategray: '#708090',\n    slategrey: '#708090',\n    snow: '#fffafa',\n    springgreen: '#00ff7f',\n    steelblue: '#4682b4',\n    tan: '#d2b48c',\n    teal: '#008080',\n    thistle: '#d8bfd8',\n    tomato: '#ff6347',\n    turquoise: '#40e0d0',\n    violet: '#ee82ee',\n    wheat: '#f5deb3',\n    white: '#ffffff',\n    whitesmoke: '#f5f5f5',\n    yellow: '#ffff00',\n    yellowgreen: '#9acd32'\n  };\n\n  chroma.colors = colors = w3cx11;\n\n  lab2rgb = function() {\n    var a, args, b, g, l, r, x, y, z;\n    args = unpack(arguments);\n    l = args[0], a = args[1], b = args[2];\n    y = (l + 16) / 116;\n    x = isNaN(a) ? y : y + a / 500;\n    z = isNaN(b) ? y : y - b / 200;\n    y = LAB_CONSTANTS.Yn * lab_xyz(y);\n    x = LAB_CONSTANTS.Xn * lab_xyz(x);\n    z = LAB_CONSTANTS.Zn * lab_xyz(z);\n    r = xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z);\n    g = xyz_rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z);\n    b = xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n  };\n\n  xyz_rgb = function(r) {\n    return 255 * (r <= 0.00304 ? 12.92 * r : 1.055 * pow(r, 1 / 2.4) - 0.055);\n  };\n\n  lab_xyz = function(t) {\n    if (t > LAB_CONSTANTS.t1) {\n      return t * t * t;\n    } else {\n      return LAB_CONSTANTS.t2 * (t - LAB_CONSTANTS.t0);\n    }\n  };\n\n  LAB_CONSTANTS = {\n    Kn: 18,\n    Xn: 0.950470,\n    Yn: 1,\n    Zn: 1.088830,\n    t0: 0.137931034,\n    t1: 0.206896552,\n    t2: 0.12841855,\n    t3: 0.008856452\n  };\n\n  rgb2lab = function() {\n    var b, g, r, ref, ref1, x, y, z;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    ref1 = rgb2xyz(r, g, b), x = ref1[0], y = ref1[1], z = ref1[2];\n    return [116 * y - 16, 500 * (x - y), 200 * (y - z)];\n  };\n\n  rgb_xyz = function(r) {\n    if ((r /= 255) <= 0.04045) {\n      return r / 12.92;\n    } else {\n      return pow((r + 0.055) / 1.055, 2.4);\n    }\n  };\n\n  xyz_lab = function(t) {\n    if (t > LAB_CONSTANTS.t3) {\n      return pow(t, 1 / 3);\n    } else {\n      return t / LAB_CONSTANTS.t2 + LAB_CONSTANTS.t0;\n    }\n  };\n\n  rgb2xyz = function() {\n    var b, g, r, ref, x, y, z;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    r = rgb_xyz(r);\n    g = rgb_xyz(g);\n    b = rgb_xyz(b);\n    x = xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / LAB_CONSTANTS.Xn);\n    y = xyz_lab((0.2126729 * r + 0.7151522 * g + 0.0721750 * b) / LAB_CONSTANTS.Yn);\n    z = xyz_lab((0.0193339 * r + 0.1191920 * g + 0.9503041 * b) / LAB_CONSTANTS.Zn);\n    return [x, y, z];\n  };\n\n  chroma.lab = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['lab']), function(){});\n  };\n\n  _input.lab = lab2rgb;\n\n  Color.prototype.lab = function() {\n    return rgb2lab(this._rgb);\n  };\n\n  bezier = function(colors) {\n    var I, I0, I1, c, lab0, lab1, lab2, lab3, ref, ref1, ref2;\n    colors = (function() {\n      var len, o, results;\n      results = [];\n      for (o = 0, len = colors.length; o < len; o++) {\n        c = colors[o];\n        results.push(chroma(c));\n      }\n      return results;\n    })();\n    if (colors.length === 2) {\n      ref = (function() {\n        var len, o, results;\n        results = [];\n        for (o = 0, len = colors.length; o < len; o++) {\n          c = colors[o];\n          results.push(c.lab());\n        }\n        return results;\n      })(), lab0 = ref[0], lab1 = ref[1];\n      I = function(t) {\n        var i, lab;\n        lab = (function() {\n          var o, results;\n          results = [];\n          for (i = o = 0; o <= 2; i = ++o) {\n            results.push(lab0[i] + t * (lab1[i] - lab0[i]));\n          }\n          return results;\n        })();\n        return chroma.lab.apply(chroma, lab);\n      };\n    } else if (colors.length === 3) {\n      ref1 = (function() {\n        var len, o, results;\n        results = [];\n        for (o = 0, len = colors.length; o < len; o++) {\n          c = colors[o];\n          results.push(c.lab());\n        }\n        return results;\n      })(), lab0 = ref1[0], lab1 = ref1[1], lab2 = ref1[2];\n      I = function(t) {\n        var i, lab;\n        lab = (function() {\n          var o, results;\n          results = [];\n          for (i = o = 0; o <= 2; i = ++o) {\n            results.push((1 - t) * (1 - t) * lab0[i] + 2 * (1 - t) * t * lab1[i] + t * t * lab2[i]);\n          }\n          return results;\n        })();\n        return chroma.lab.apply(chroma, lab);\n      };\n    } else if (colors.length === 4) {\n      ref2 = (function() {\n        var len, o, results;\n        results = [];\n        for (o = 0, len = colors.length; o < len; o++) {\n          c = colors[o];\n          results.push(c.lab());\n        }\n        return results;\n      })(), lab0 = ref2[0], lab1 = ref2[1], lab2 = ref2[2], lab3 = ref2[3];\n      I = function(t) {\n        var i, lab;\n        lab = (function() {\n          var o, results;\n          results = [];\n          for (i = o = 0; o <= 2; i = ++o) {\n            results.push((1 - t) * (1 - t) * (1 - t) * lab0[i] + 3 * (1 - t) * (1 - t) * t * lab1[i] + 3 * (1 - t) * t * t * lab2[i] + t * t * t * lab3[i]);\n          }\n          return results;\n        })();\n        return chroma.lab.apply(chroma, lab);\n      };\n    } else if (colors.length === 5) {\n      I0 = bezier(colors.slice(0, 3));\n      I1 = bezier(colors.slice(2, 5));\n      I = function(t) {\n        if (t < 0.5) {\n          return I0(t * 2);\n        } else {\n          return I1((t - 0.5) * 2);\n        }\n      };\n    }\n    return I;\n  };\n\n  chroma.bezier = function(colors) {\n    var f;\n    f = bezier(colors);\n    f.scale = function() {\n      return chroma.scale(f);\n    };\n    return f;\n  };\n\n\n  /*\n      chroma.js\n  \n      Copyright (c) 2011-2013, Gregor Aisch\n      All rights reserved.\n  \n      Redistribution and use in source and binary forms, with or without\n      modification, are permitted provided that the following conditions are met:\n  \n      * Redistributions of source code must retain the above copyright notice, this\n        list of conditions and the following disclaimer.\n  \n      * Redistributions in binary form must reproduce the above copyright notice,\n        this list of conditions and the following disclaimer in the documentation\n        and/or other materials provided with the distribution.\n  \n      * The name Gregor Aisch may not be used to endorse or promote products\n        derived from this software without specific prior written permission.\n  \n      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n      DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n      INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n      BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n      DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n      OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n      NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n      EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  \n      @source: https://github.com/gka/chroma.js\n   */\n\n  chroma.cubehelix = function(start, rotations, hue, gamma, lightness) {\n    var dh, dl, f;\n    if (start == null) {\n      start = 300;\n    }\n    if (rotations == null) {\n      rotations = -1.5;\n    }\n    if (hue == null) {\n      hue = 1;\n    }\n    if (gamma == null) {\n      gamma = 1;\n    }\n    if (lightness == null) {\n      lightness = [0, 1];\n    }\n    dh = 0;\n    if (type(lightness) === 'array') {\n      dl = lightness[1] - lightness[0];\n    } else {\n      dl = 0;\n      lightness = [lightness, lightness];\n    }\n    f = function(fract) {\n      var a, amp, b, cos_a, g, h, l, r, sin_a;\n      a = TWOPI * ((start + 120) / 360 + rotations * fract);\n      l = pow(lightness[0] + dl * fract, gamma);\n      h = dh !== 0 ? hue[0] + fract * dh : hue;\n      amp = h * l * (1 - l) / 2;\n      cos_a = cos(a);\n      sin_a = sin(a);\n      r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);\n      g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);\n      b = l + amp * (+1.97294 * cos_a);\n      return chroma(clip_rgb([r * 255, g * 255, b * 255]));\n    };\n    f.start = function(s) {\n      if (s == null) {\n        return start;\n      }\n      start = s;\n      return f;\n    };\n    f.rotations = function(r) {\n      if (r == null) {\n        return rotations;\n      }\n      rotations = r;\n      return f;\n    };\n    f.gamma = function(g) {\n      if (g == null) {\n        return gamma;\n      }\n      gamma = g;\n      return f;\n    };\n    f.hue = function(h) {\n      if (h == null) {\n        return hue;\n      }\n      hue = h;\n      if (type(hue) === 'array') {\n        dh = hue[1] - hue[0];\n        if (dh === 0) {\n          hue = hue[1];\n        }\n      } else {\n        dh = 0;\n      }\n      return f;\n    };\n    f.lightness = function(h) {\n      if (h == null) {\n        return lightness;\n      }\n      if (type(h) === 'array') {\n        lightness = h;\n        dl = h[1] - h[0];\n      } else {\n        lightness = [h, h];\n        dl = 0;\n      }\n      return f;\n    };\n    f.scale = function() {\n      return chroma.scale(f);\n    };\n    f.hue(hue);\n    return f;\n  };\n\n  chroma.random = function() {\n    var code, digits, i, o;\n    digits = '0123456789abcdef';\n    code = '#';\n    for (i = o = 0; o < 6; i = ++o) {\n      code += digits.charAt(floor(Math.random() * 16));\n    }\n    return new Color(code);\n  };\n\n  _interpolators = [];\n\n  interpolate = function(col1, col2, f, m) {\n    var interpol, len, o, res;\n    if (f == null) {\n      f = 0.5;\n    }\n    if (m == null) {\n      m = 'rgb';\n    }\n\n    /*\n    interpolates between colors\n    f = 0 --> me\n    f = 1 --> col\n     */\n    if (type(col1) !== 'object') {\n      col1 = chroma(col1);\n    }\n    if (type(col2) !== 'object') {\n      col2 = chroma(col2);\n    }\n    for (o = 0, len = _interpolators.length; o < len; o++) {\n      interpol = _interpolators[o];\n      if (m === interpol[0]) {\n        res = interpol[1](col1, col2, f, m);\n        break;\n      }\n    }\n    if (res == null) {\n      throw \"color mode \" + m + \" is not supported\";\n    }\n    return res.alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));\n  };\n\n  chroma.interpolate = interpolate;\n\n  Color.prototype.interpolate = function(col2, f, m) {\n    return interpolate(this, col2, f, m);\n  };\n\n  chroma.mix = interpolate;\n\n  Color.prototype.mix = Color.prototype.interpolate;\n\n  _input.rgb = function() {\n    var k, ref, results, v;\n    ref = unpack(arguments);\n    results = [];\n    for (k in ref) {\n      v = ref[k];\n      results.push(v);\n    }\n    return results;\n  };\n\n  chroma.rgb = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['rgb']), function(){});\n  };\n\n  Color.prototype.rgb = function(round) {\n    if (round == null) {\n      round = true;\n    }\n    if (round) {\n      return this._rgb.map(Math.round).slice(0, 3);\n    } else {\n      return this._rgb.slice(0, 3);\n    }\n  };\n\n  Color.prototype.rgba = function(round) {\n    if (round == null) {\n      round = true;\n    }\n    if (!round) {\n      return this._rgb.slice(0);\n    }\n    return [Math.round(this._rgb[0]), Math.round(this._rgb[1]), Math.round(this._rgb[2]), this._rgb[3]];\n  };\n\n  _guess_formats.push({\n    p: 3,\n    test: function(n) {\n      var a;\n      a = unpack(arguments);\n      if (type(a) === 'array' && a.length === 3) {\n        return 'rgb';\n      }\n      if (a.length === 4 && type(a[3]) === \"number\" && a[3] >= 0 && a[3] <= 1) {\n        return 'rgb';\n      }\n    }\n  });\n\n  _input.lrgb = _input.rgb;\n\n  interpolate_lrgb = function(col1, col2, f, m) {\n    var xyz0, xyz1;\n    xyz0 = col1._rgb;\n    xyz1 = col2._rgb;\n    return new Color(sqrt(pow(xyz0[0], 2) * (1 - f) + pow(xyz1[0], 2) * f), sqrt(pow(xyz0[1], 2) * (1 - f) + pow(xyz1[1], 2) * f), sqrt(pow(xyz0[2], 2) * (1 - f) + pow(xyz1[2], 2) * f), m);\n  };\n\n  _average_lrgb = function(colors) {\n    var col, f, len, o, rgb, xyz;\n    f = 1 / colors.length;\n    xyz = [0, 0, 0, 0];\n    for (o = 0, len = colors.length; o < len; o++) {\n      col = colors[o];\n      rgb = col._rgb;\n      xyz[0] += pow(rgb[0], 2) * f;\n      xyz[1] += pow(rgb[1], 2) * f;\n      xyz[2] += pow(rgb[2], 2) * f;\n      xyz[3] += rgb[3] * f;\n    }\n    xyz[0] = sqrt(xyz[0]);\n    xyz[1] = sqrt(xyz[1]);\n    xyz[2] = sqrt(xyz[2]);\n    return new Color(xyz);\n  };\n\n  _interpolators.push(['lrgb', interpolate_lrgb]);\n\n  chroma.average = function(colors, mode) {\n    var A, alpha, c, cnt, dx, dy, first, i, l, len, o, xyz, xyz2;\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    l = colors.length;\n    colors = colors.map(function(c) {\n      return chroma(c);\n    });\n    first = colors.splice(0, 1)[0];\n    if (mode === 'lrgb') {\n      return _average_lrgb(colors);\n    }\n    xyz = first.get(mode);\n    cnt = [];\n    dx = 0;\n    dy = 0;\n    for (i in xyz) {\n      xyz[i] = xyz[i] || 0;\n      cnt.push(isNaN(xyz[i]) ? 0 : 1);\n      if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {\n        A = xyz[i] / 180 * PI;\n        dx += cos(A);\n        dy += sin(A);\n      }\n    }\n    alpha = first.alpha();\n    for (o = 0, len = colors.length; o < len; o++) {\n      c = colors[o];\n      xyz2 = c.get(mode);\n      alpha += c.alpha();\n      for (i in xyz) {\n        if (!isNaN(xyz2[i])) {\n          cnt[i] += 1;\n          if (mode.charAt(i) === 'h') {\n            A = xyz2[i] / 180 * PI;\n            dx += cos(A);\n            dy += sin(A);\n          } else {\n            xyz[i] += xyz2[i];\n          }\n        }\n      }\n    }\n    for (i in xyz) {\n      if (mode.charAt(i) === 'h') {\n        A = atan2(dy / cnt[i], dx / cnt[i]) / PI * 180;\n        while (A < 0) {\n          A += 360;\n        }\n        while (A >= 360) {\n          A -= 360;\n        }\n        xyz[i] = A;\n      } else {\n        xyz[i] = xyz[i] / cnt[i];\n      }\n    }\n    return chroma(xyz, mode).alpha(alpha / l);\n  };\n\n  hex2rgb = function(hex) {\n    var a, b, g, r, rgb, u;\n    if (hex.match(/^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)) {\n      if (hex.length === 4 || hex.length === 7) {\n        hex = hex.substr(1);\n      }\n      if (hex.length === 3) {\n        hex = hex.split(\"\");\n        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n      }\n      u = parseInt(hex, 16);\n      r = u >> 16;\n      g = u >> 8 & 0xFF;\n      b = u & 0xFF;\n      return [r, g, b, 1];\n    }\n    if (hex.match(/^#?([A-Fa-f0-9]{8})$/)) {\n      if (hex.length === 9) {\n        hex = hex.substr(1);\n      }\n      u = parseInt(hex, 16);\n      r = u >> 24 & 0xFF;\n      g = u >> 16 & 0xFF;\n      b = u >> 8 & 0xFF;\n      a = round((u & 0xFF) / 0xFF * 100) / 100;\n      return [r, g, b, a];\n    }\n    if ((_input.css != null) && (rgb = _input.css(hex))) {\n      return rgb;\n    }\n    throw \"unknown color: \" + hex;\n  };\n\n  rgb2hex = function(channels, mode) {\n    var a, b, g, hxa, r, str, u;\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    r = channels[0], g = channels[1], b = channels[2], a = channels[3];\n    r = Math.round(r);\n    g = Math.round(g);\n    b = Math.round(b);\n    u = r << 16 | g << 8 | b;\n    str = \"000000\" + u.toString(16);\n    str = str.substr(str.length - 6);\n    hxa = '0' + round(a * 255).toString(16);\n    hxa = hxa.substr(hxa.length - 2);\n    return \"#\" + (function() {\n      switch (mode.toLowerCase()) {\n        case 'rgba':\n          return str + hxa;\n        case 'argb':\n          return hxa + str;\n        default:\n          return str;\n      }\n    })();\n  };\n\n  _input.hex = function(h) {\n    return hex2rgb(h);\n  };\n\n  chroma.hex = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['hex']), function(){});\n  };\n\n  Color.prototype.hex = function(mode) {\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    return rgb2hex(this._rgb, mode);\n  };\n\n  _guess_formats.push({\n    p: 4,\n    test: function(n) {\n      if (arguments.length === 1 && type(n) === \"string\") {\n        return 'hex';\n      }\n    }\n  });\n\n  hsl2rgb = function() {\n    var args, b, c, g, h, i, l, o, r, ref, s, t1, t2, t3;\n    args = unpack(arguments);\n    h = args[0], s = args[1], l = args[2];\n    if (s === 0) {\n      r = g = b = l * 255;\n    } else {\n      t3 = [0, 0, 0];\n      c = [0, 0, 0];\n      t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      t1 = 2 * l - t2;\n      h /= 360;\n      t3[0] = h + 1 / 3;\n      t3[1] = h;\n      t3[2] = h - 1 / 3;\n      for (i = o = 0; o <= 2; i = ++o) {\n        if (t3[i] < 0) {\n          t3[i] += 1;\n        }\n        if (t3[i] > 1) {\n          t3[i] -= 1;\n        }\n        if (6 * t3[i] < 1) {\n          c[i] = t1 + (t2 - t1) * 6 * t3[i];\n        } else if (2 * t3[i] < 1) {\n          c[i] = t2;\n        } else if (3 * t3[i] < 2) {\n          c[i] = t1 + (t2 - t1) * ((2 / 3) - t3[i]) * 6;\n        } else {\n          c[i] = t1;\n        }\n      }\n      ref = [round(c[0] * 255), round(c[1] * 255), round(c[2] * 255)], r = ref[0], g = ref[1], b = ref[2];\n    }\n    if (args.length > 3) {\n      return [r, g, b, args[3]];\n    } else {\n      return [r, g, b];\n    }\n  };\n\n  rgb2hsl = function(r, g, b) {\n    var h, l, min, ref, s;\n    if (r !== void 0 && r.length >= 3) {\n      ref = r, r = ref[0], g = ref[1], b = ref[2];\n    }\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    min = Math.min(r, g, b);\n    max = Math.max(r, g, b);\n    l = (max + min) / 2;\n    if (max === min) {\n      s = 0;\n      h = Number.NaN;\n    } else {\n      s = l < 0.5 ? (max - min) / (max + min) : (max - min) / (2 - max - min);\n    }\n    if (r === max) {\n      h = (g - b) / (max - min);\n    } else if (g === max) {\n      h = 2 + (b - r) / (max - min);\n    } else if (b === max) {\n      h = 4 + (r - g) / (max - min);\n    }\n    h *= 60;\n    if (h < 0) {\n      h += 360;\n    }\n    return [h, s, l];\n  };\n\n  chroma.hsl = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['hsl']), function(){});\n  };\n\n  _input.hsl = hsl2rgb;\n\n  Color.prototype.hsl = function() {\n    return rgb2hsl(this._rgb);\n  };\n\n  hsv2rgb = function() {\n    var args, b, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, s, t, v;\n    args = unpack(arguments);\n    h = args[0], s = args[1], v = args[2];\n    v *= 255;\n    if (s === 0) {\n      r = g = b = v;\n    } else {\n      if (h === 360) {\n        h = 0;\n      }\n      if (h > 360) {\n        h -= 360;\n      }\n      if (h < 0) {\n        h += 360;\n      }\n      h /= 60;\n      i = floor(h);\n      f = h - i;\n      p = v * (1 - s);\n      q = v * (1 - s * f);\n      t = v * (1 - s * (1 - f));\n      switch (i) {\n        case 0:\n          ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];\n          break;\n        case 1:\n          ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];\n          break;\n        case 2:\n          ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];\n          break;\n        case 3:\n          ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];\n          break;\n        case 4:\n          ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];\n          break;\n        case 5:\n          ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];\n      }\n    }\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n  };\n\n  rgb2hsv = function() {\n    var b, delta, g, h, min, r, ref, s, v;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    min = Math.min(r, g, b);\n    max = Math.max(r, g, b);\n    delta = max - min;\n    v = max / 255.0;\n    if (max === 0) {\n      h = Number.NaN;\n      s = 0;\n    } else {\n      s = delta / max;\n      if (r === max) {\n        h = (g - b) / delta;\n      }\n      if (g === max) {\n        h = 2 + (b - r) / delta;\n      }\n      if (b === max) {\n        h = 4 + (r - g) / delta;\n      }\n      h *= 60;\n      if (h < 0) {\n        h += 360;\n      }\n    }\n    return [h, s, v];\n  };\n\n  chroma.hsv = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['hsv']), function(){});\n  };\n\n  _input.hsv = hsv2rgb;\n\n  Color.prototype.hsv = function() {\n    return rgb2hsv(this._rgb);\n  };\n\n  num2rgb = function(num) {\n    var b, g, r;\n    if (type(num) === \"number\" && num >= 0 && num <= 0xFFFFFF) {\n      r = num >> 16;\n      g = (num >> 8) & 0xFF;\n      b = num & 0xFF;\n      return [r, g, b, 1];\n    }\n    console.warn(\"unknown num color: \" + num);\n    return [0, 0, 0, 1];\n  };\n\n  rgb2num = function() {\n    var b, g, r, ref;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    return (r << 16) + (g << 8) + b;\n  };\n\n  chroma.num = function(num) {\n    return new Color(num, 'num');\n  };\n\n  Color.prototype.num = function(mode) {\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    return rgb2num(this._rgb, mode);\n  };\n\n  _input.num = num2rgb;\n\n  _guess_formats.push({\n    p: 1,\n    test: function(n) {\n      if (arguments.length === 1 && type(n) === \"number\" && n >= 0 && n <= 0xFFFFFF) {\n        return 'num';\n      }\n    }\n  });\n\n  hcg2rgb = function() {\n    var _c, _g, args, b, c, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, t, v;\n    args = unpack(arguments);\n    h = args[0], c = args[1], _g = args[2];\n    c = c / 100;\n    g = g / 100 * 255;\n    _c = c * 255;\n    if (c === 0) {\n      r = g = b = _g;\n    } else {\n      if (h === 360) {\n        h = 0;\n      }\n      if (h > 360) {\n        h -= 360;\n      }\n      if (h < 0) {\n        h += 360;\n      }\n      h /= 60;\n      i = floor(h);\n      f = h - i;\n      p = _g * (1 - c);\n      q = p + _c * (1 - f);\n      t = p + _c * f;\n      v = p + _c;\n      switch (i) {\n        case 0:\n          ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];\n          break;\n        case 1:\n          ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];\n          break;\n        case 2:\n          ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];\n          break;\n        case 3:\n          ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];\n          break;\n        case 4:\n          ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];\n          break;\n        case 5:\n          ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];\n      }\n    }\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n  };\n\n  rgb2hcg = function() {\n    var _g, b, c, delta, g, h, min, r, ref;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    min = Math.min(r, g, b);\n    max = Math.max(r, g, b);\n    delta = max - min;\n    c = delta * 100 / 255;\n    _g = min / (255 - delta) * 100;\n    if (delta === 0) {\n      h = Number.NaN;\n    } else {\n      if (r === max) {\n        h = (g - b) / delta;\n      }\n      if (g === max) {\n        h = 2 + (b - r) / delta;\n      }\n      if (b === max) {\n        h = 4 + (r - g) / delta;\n      }\n      h *= 60;\n      if (h < 0) {\n        h += 360;\n      }\n    }\n    return [h, c, _g];\n  };\n\n  chroma.hcg = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['hcg']), function(){});\n  };\n\n  _input.hcg = hcg2rgb;\n\n  Color.prototype.hcg = function() {\n    return rgb2hcg(this._rgb);\n  };\n\n  css2rgb = function(css) {\n    var aa, ab, hsl, i, m, o, rgb, w;\n    css = css.toLowerCase();\n    if ((chroma.colors != null) && chroma.colors[css]) {\n      return hex2rgb(chroma.colors[css]);\n    }\n    if (m = css.match(/rgb\\(\\s*(\\-?\\d+),\\s*(\\-?\\d+)\\s*,\\s*(\\-?\\d+)\\s*\\)/)) {\n      rgb = m.slice(1, 4);\n      for (i = o = 0; o <= 2; i = ++o) {\n        rgb[i] = +rgb[i];\n      }\n      rgb[3] = 1;\n    } else if (m = css.match(/rgba\\(\\s*(\\-?\\d+),\\s*(\\-?\\d+)\\s*,\\s*(\\-?\\d+)\\s*,\\s*([01]|[01]?\\.\\d+)\\)/)) {\n      rgb = m.slice(1, 5);\n      for (i = w = 0; w <= 3; i = ++w) {\n        rgb[i] = +rgb[i];\n      }\n    } else if (m = css.match(/rgb\\(\\s*(\\-?\\d+(?:\\.\\d+)?)%,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*\\)/)) {\n      rgb = m.slice(1, 4);\n      for (i = aa = 0; aa <= 2; i = ++aa) {\n        rgb[i] = round(rgb[i] * 2.55);\n      }\n      rgb[3] = 1;\n    } else if (m = css.match(/rgba\\(\\s*(\\-?\\d+(?:\\.\\d+)?)%,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)/)) {\n      rgb = m.slice(1, 5);\n      for (i = ab = 0; ab <= 2; i = ++ab) {\n        rgb[i] = round(rgb[i] * 2.55);\n      }\n      rgb[3] = +rgb[3];\n    } else if (m = css.match(/hsl\\(\\s*(\\-?\\d+(?:\\.\\d+)?),\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*\\)/)) {\n      hsl = m.slice(1, 4);\n      hsl[1] *= 0.01;\n      hsl[2] *= 0.01;\n      rgb = hsl2rgb(hsl);\n      rgb[3] = 1;\n    } else if (m = css.match(/hsla\\(\\s*(\\-?\\d+(?:\\.\\d+)?),\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)/)) {\n      hsl = m.slice(1, 4);\n      hsl[1] *= 0.01;\n      hsl[2] *= 0.01;\n      rgb = hsl2rgb(hsl);\n      rgb[3] = +m[4];\n    }\n    return rgb;\n  };\n\n  rgb2css = function(rgba) {\n    var mode;\n    mode = rgba[3] < 1 ? 'rgba' : 'rgb';\n    if (mode === 'rgb') {\n      return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ')';\n    } else if (mode === 'rgba') {\n      return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ',' + rgba[3] + ')';\n    } else {\n\n    }\n  };\n\n  rnd = function(a) {\n    return round(a * 100) / 100;\n  };\n\n  hsl2css = function(hsl, alpha) {\n    var mode;\n    mode = alpha < 1 ? 'hsla' : 'hsl';\n    hsl[0] = rnd(hsl[0] || 0);\n    hsl[1] = rnd(hsl[1] * 100) + '%';\n    hsl[2] = rnd(hsl[2] * 100) + '%';\n    if (mode === 'hsla') {\n      hsl[3] = alpha;\n    }\n    return mode + '(' + hsl.join(',') + ')';\n  };\n\n  _input.css = function(h) {\n    return css2rgb(h);\n  };\n\n  chroma.css = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['css']), function(){});\n  };\n\n  Color.prototype.css = function(mode) {\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    if (mode.slice(0, 3) === 'rgb') {\n      return rgb2css(this._rgb);\n    } else if (mode.slice(0, 3) === 'hsl') {\n      return hsl2css(this.hsl(), this.alpha());\n    }\n  };\n\n  _input.named = function(name) {\n    return hex2rgb(w3cx11[name]);\n  };\n\n  _guess_formats.push({\n    p: 5,\n    test: function(n) {\n      if (arguments.length === 1 && (w3cx11[n] != null)) {\n        return 'named';\n      }\n    }\n  });\n\n  Color.prototype.name = function(n) {\n    var h, k;\n    if (arguments.length) {\n      if (w3cx11[n]) {\n        this._rgb = hex2rgb(w3cx11[n]);\n      }\n      this._rgb[3] = 1;\n      this;\n    }\n    h = this.hex();\n    for (k in w3cx11) {\n      if (h === w3cx11[k]) {\n        return k;\n      }\n    }\n    return h;\n  };\n\n  lch2lab = function() {\n\n    /*\n    Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.\n    These formulas were invented by David Dalrymple to obtain maximum contrast without going\n    out of gamut if the parameters are in the range 0-1.\n    \n    A saturation multiplier was added by Gregor Aisch\n     */\n    var c, h, l, ref;\n    ref = unpack(arguments), l = ref[0], c = ref[1], h = ref[2];\n    h = h * DEG2RAD;\n    return [l, cos(h) * c, sin(h) * c];\n  };\n\n  lch2rgb = function() {\n    var L, a, args, b, c, g, h, l, r, ref, ref1;\n    args = unpack(arguments);\n    l = args[0], c = args[1], h = args[2];\n    ref = lch2lab(l, c, h), L = ref[0], a = ref[1], b = ref[2];\n    ref1 = lab2rgb(L, a, b), r = ref1[0], g = ref1[1], b = ref1[2];\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n  };\n\n  lab2lch = function() {\n    var a, b, c, h, l, ref;\n    ref = unpack(arguments), l = ref[0], a = ref[1], b = ref[2];\n    c = sqrt(a * a + b * b);\n    h = (atan2(b, a) * RAD2DEG + 360) % 360;\n    if (round(c * 10000) === 0) {\n      h = Number.NaN;\n    }\n    return [l, c, h];\n  };\n\n  rgb2lch = function() {\n    var a, b, g, l, r, ref, ref1;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    ref1 = rgb2lab(r, g, b), l = ref1[0], a = ref1[1], b = ref1[2];\n    return lab2lch(l, a, b);\n  };\n\n  chroma.lch = function() {\n    var args;\n    args = unpack(arguments);\n    return new Color(args, 'lch');\n  };\n\n  chroma.hcl = function() {\n    var args;\n    args = unpack(arguments);\n    return new Color(args, 'hcl');\n  };\n\n  _input.lch = lch2rgb;\n\n  _input.hcl = function() {\n    var c, h, l, ref;\n    ref = unpack(arguments), h = ref[0], c = ref[1], l = ref[2];\n    return lch2rgb([l, c, h]);\n  };\n\n  Color.prototype.lch = function() {\n    return rgb2lch(this._rgb);\n  };\n\n  Color.prototype.hcl = function() {\n    return rgb2lch(this._rgb).reverse();\n  };\n\n  rgb2cmyk = function(mode) {\n    var b, c, f, g, k, m, r, ref, y;\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    r = r / 255;\n    g = g / 255;\n    b = b / 255;\n    k = 1 - Math.max(r, Math.max(g, b));\n    f = k < 1 ? 1 / (1 - k) : 0;\n    c = (1 - r - k) * f;\n    m = (1 - g - k) * f;\n    y = (1 - b - k) * f;\n    return [c, m, y, k];\n  };\n\n  cmyk2rgb = function() {\n    var alpha, args, b, c, g, k, m, r, y;\n    args = unpack(arguments);\n    c = args[0], m = args[1], y = args[2], k = args[3];\n    alpha = args.length > 4 ? args[4] : 1;\n    if (k === 1) {\n      return [0, 0, 0, alpha];\n    }\n    r = c >= 1 ? 0 : 255 * (1 - c) * (1 - k);\n    g = m >= 1 ? 0 : 255 * (1 - m) * (1 - k);\n    b = y >= 1 ? 0 : 255 * (1 - y) * (1 - k);\n    return [r, g, b, alpha];\n  };\n\n  _input.cmyk = function() {\n    return cmyk2rgb(unpack(arguments));\n  };\n\n  chroma.cmyk = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['cmyk']), function(){});\n  };\n\n  Color.prototype.cmyk = function() {\n    return rgb2cmyk(this._rgb);\n  };\n\n  _input.gl = function() {\n    var i, k, o, rgb, v;\n    rgb = (function() {\n      var ref, results;\n      ref = unpack(arguments);\n      results = [];\n      for (k in ref) {\n        v = ref[k];\n        results.push(v);\n      }\n      return results;\n    }).apply(this, arguments);\n    for (i = o = 0; o <= 2; i = ++o) {\n      rgb[i] *= 255;\n    }\n    return rgb;\n  };\n\n  chroma.gl = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['gl']), function(){});\n  };\n\n  Color.prototype.gl = function() {\n    var rgb;\n    rgb = this._rgb;\n    return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255, rgb[3]];\n  };\n\n  rgb2luminance = function(r, g, b) {\n    var ref;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    r = luminance_x(r);\n    g = luminance_x(g);\n    b = luminance_x(b);\n    return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n  };\n\n  luminance_x = function(x) {\n    x /= 255;\n    if (x <= 0.03928) {\n      return x / 12.92;\n    } else {\n      return pow((x + 0.055) / 1.055, 2.4);\n    }\n  };\n\n  interpolate_rgb = function(col1, col2, f, m) {\n    var xyz0, xyz1;\n    xyz0 = col1._rgb;\n    xyz1 = col2._rgb;\n    return new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);\n  };\n\n  _interpolators.push(['rgb', interpolate_rgb]);\n\n  Color.prototype.luminance = function(lum, mode) {\n    var cur_lum, eps, max_iter, rgba, test;\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    if (!arguments.length) {\n      return rgb2luminance(this._rgb);\n    }\n    rgba = this._rgb;\n    if (lum === 0) {\n      rgba = [0, 0, 0, this._rgb[3]];\n    } else if (lum === 1) {\n      rgba = [255, 255, 255, this[3]];\n    } else {\n      cur_lum = rgb2luminance(this._rgb);\n      eps = 1e-7;\n      max_iter = 20;\n      test = function(l, h) {\n        var lm, m;\n        m = l.interpolate(h, 0.5, mode);\n        lm = m.luminance();\n        if (Math.abs(lum - lm) < eps || !max_iter--) {\n          return m;\n        }\n        if (lm > lum) {\n          return test(l, m);\n        }\n        return test(m, h);\n      };\n      if (cur_lum > lum) {\n        rgba = test(chroma('black'), this).rgba();\n      } else {\n        rgba = test(this, chroma('white')).rgba();\n      }\n    }\n    return chroma(rgba).alpha(this.alpha());\n  };\n\n  temperature2rgb = function(kelvin) {\n    var b, g, r, temp;\n    temp = kelvin / 100;\n    if (temp < 66) {\n      r = 255;\n      g = -155.25485562709179 - 0.44596950469579133 * (g = temp - 2) + 104.49216199393888 * log(g);\n      b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp - 10) + 115.67994401066147 * log(b);\n    } else {\n      r = 351.97690566805693 + 0.114206453784165 * (r = temp - 55) - 40.25366309332127 * log(r);\n      g = 325.4494125711974 + 0.07943456536662342 * (g = temp - 50) - 28.0852963507957 * log(g);\n      b = 255;\n    }\n    return [r, g, b];\n  };\n\n  rgb2temperature = function() {\n    var b, eps, g, maxTemp, minTemp, r, ref, rgb, temp;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    minTemp = 1000;\n    maxTemp = 40000;\n    eps = 0.4;\n    while (maxTemp - minTemp > eps) {\n      temp = (maxTemp + minTemp) * 0.5;\n      rgb = temperature2rgb(temp);\n      if ((rgb[2] / rgb[0]) >= (b / r)) {\n        maxTemp = temp;\n      } else {\n        minTemp = temp;\n      }\n    }\n    return round(temp);\n  };\n\n  chroma.temperature = chroma.kelvin = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['temperature']), function(){});\n  };\n\n  _input.temperature = _input.kelvin = _input.K = temperature2rgb;\n\n  Color.prototype.temperature = function() {\n    return rgb2temperature(this._rgb);\n  };\n\n  Color.prototype.kelvin = Color.prototype.temperature;\n\n  chroma.contrast = function(a, b) {\n    var l1, l2, ref, ref1;\n    if ((ref = type(a)) === 'string' || ref === 'number') {\n      a = new Color(a);\n    }\n    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {\n      b = new Color(b);\n    }\n    l1 = a.luminance();\n    l2 = b.luminance();\n    if (l1 > l2) {\n      return (l1 + 0.05) / (l2 + 0.05);\n    } else {\n      return (l2 + 0.05) / (l1 + 0.05);\n    }\n  };\n\n  chroma.distance = function(a, b, mode) {\n    var d, i, l1, l2, ref, ref1, sum_sq;\n    if (mode == null) {\n      mode = 'lab';\n    }\n    if ((ref = type(a)) === 'string' || ref === 'number') {\n      a = new Color(a);\n    }\n    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {\n      b = new Color(b);\n    }\n    l1 = a.get(mode);\n    l2 = b.get(mode);\n    sum_sq = 0;\n    for (i in l1) {\n      d = (l1[i] || 0) - (l2[i] || 0);\n      sum_sq += d * d;\n    }\n    return Math.sqrt(sum_sq);\n  };\n\n  chroma.deltaE = function(a, b, L, C) {\n    var L1, L2, a1, a2, b1, b2, c1, c2, c4, dH2, delA, delB, delC, delL, f, h1, ref, ref1, ref2, ref3, sc, sh, sl, t, v1, v2, v3;\n    if (L == null) {\n      L = 1;\n    }\n    if (C == null) {\n      C = 1;\n    }\n    if ((ref = type(a)) === 'string' || ref === 'number') {\n      a = new Color(a);\n    }\n    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {\n      b = new Color(b);\n    }\n    ref2 = a.lab(), L1 = ref2[0], a1 = ref2[1], b1 = ref2[2];\n    ref3 = b.lab(), L2 = ref3[0], a2 = ref3[1], b2 = ref3[2];\n    c1 = sqrt(a1 * a1 + b1 * b1);\n    c2 = sqrt(a2 * a2 + b2 * b2);\n    sl = L1 < 16.0 ? 0.511 : (0.040975 * L1) / (1.0 + 0.01765 * L1);\n    sc = (0.0638 * c1) / (1.0 + 0.0131 * c1) + 0.638;\n    h1 = c1 < 0.000001 ? 0.0 : (atan2(b1, a1) * 180.0) / PI;\n    while (h1 < 0) {\n      h1 += 360;\n    }\n    while (h1 >= 360) {\n      h1 -= 360;\n    }\n    t = (h1 >= 164.0) && (h1 <= 345.0) ? 0.56 + abs(0.2 * cos((PI * (h1 + 168.0)) / 180.0)) : 0.36 + abs(0.4 * cos((PI * (h1 + 35.0)) / 180.0));\n    c4 = c1 * c1 * c1 * c1;\n    f = sqrt(c4 / (c4 + 1900.0));\n    sh = sc * (f * t + 1.0 - f);\n    delL = L1 - L2;\n    delC = c1 - c2;\n    delA = a1 - a2;\n    delB = b1 - b2;\n    dH2 = delA * delA + delB * delB - delC * delC;\n    v1 = delL / (L * sl);\n    v2 = delC / (C * sc);\n    v3 = sh;\n    return sqrt(v1 * v1 + v2 * v2 + (dH2 / (v3 * v3)));\n  };\n\n  Color.prototype.get = function(modechan) {\n    var channel, i, me, mode, ref, src;\n    me = this;\n    ref = modechan.split('.'), mode = ref[0], channel = ref[1];\n    src = me[mode]();\n    if (channel) {\n      i = mode.indexOf(channel);\n      if (i > -1) {\n        return src[i];\n      } else {\n        return console.warn('unknown channel ' + channel + ' in mode ' + mode);\n      }\n    } else {\n      return src;\n    }\n  };\n\n  Color.prototype.set = function(modechan, value) {\n    var channel, i, me, mode, ref, src;\n    me = this;\n    ref = modechan.split('.'), mode = ref[0], channel = ref[1];\n    if (channel) {\n      src = me[mode]();\n      i = mode.indexOf(channel);\n      if (i > -1) {\n        if (type(value) === 'string') {\n          switch (value.charAt(0)) {\n            case '+':\n              src[i] += +value;\n              break;\n            case '-':\n              src[i] += +value;\n              break;\n            case '*':\n              src[i] *= +(value.substr(1));\n              break;\n            case '/':\n              src[i] /= +(value.substr(1));\n              break;\n            default:\n              src[i] = +value;\n          }\n        } else {\n          src[i] = value;\n        }\n      } else {\n        console.warn('unknown channel ' + channel + ' in mode ' + mode);\n      }\n    } else {\n      src = value;\n    }\n    return chroma(src, mode).alpha(me.alpha());\n  };\n\n  Color.prototype.clipped = function() {\n    return this._rgb._clipped || false;\n  };\n\n  Color.prototype.alpha = function(a) {\n    if (arguments.length) {\n      return chroma.rgb([this._rgb[0], this._rgb[1], this._rgb[2], a]);\n    }\n    return this._rgb[3];\n  };\n\n  Color.prototype.darken = function(amount) {\n    var lab, me;\n    if (amount == null) {\n      amount = 1;\n    }\n    me = this;\n    lab = me.lab();\n    lab[0] -= LAB_CONSTANTS.Kn * amount;\n    return chroma.lab(lab).alpha(me.alpha());\n  };\n\n  Color.prototype.brighten = function(amount) {\n    if (amount == null) {\n      amount = 1;\n    }\n    return this.darken(-amount);\n  };\n\n  Color.prototype.darker = Color.prototype.darken;\n\n  Color.prototype.brighter = Color.prototype.brighten;\n\n  Color.prototype.saturate = function(amount) {\n    var lch, me;\n    if (amount == null) {\n      amount = 1;\n    }\n    me = this;\n    lch = me.lch();\n    lch[1] += amount * LAB_CONSTANTS.Kn;\n    if (lch[1] < 0) {\n      lch[1] = 0;\n    }\n    return chroma.lch(lch).alpha(me.alpha());\n  };\n\n  Color.prototype.desaturate = function(amount) {\n    if (amount == null) {\n      amount = 1;\n    }\n    return this.saturate(-amount);\n  };\n\n  Color.prototype.premultiply = function() {\n    var a, rgb;\n    rgb = this.rgb();\n    a = this.alpha();\n    return chroma(rgb[0] * a, rgb[1] * a, rgb[2] * a, a);\n  };\n\n  blend = function(bottom, top, mode) {\n    if (!blend[mode]) {\n      throw 'unknown blend mode ' + mode;\n    }\n    return blend[mode](bottom, top);\n  };\n\n  blend_f = function(f) {\n    return function(bottom, top) {\n      var c0, c1;\n      c0 = chroma(top).rgb();\n      c1 = chroma(bottom).rgb();\n      return chroma(f(c0, c1), 'rgb');\n    };\n  };\n\n  each = function(f) {\n    return function(c0, c1) {\n      var i, o, out;\n      out = [];\n      for (i = o = 0; o <= 3; i = ++o) {\n        out[i] = f(c0[i], c1[i]);\n      }\n      return out;\n    };\n  };\n\n  normal = function(a, b) {\n    return a;\n  };\n\n  multiply = function(a, b) {\n    return a * b / 255;\n  };\n\n  darken = function(a, b) {\n    if (a > b) {\n      return b;\n    } else {\n      return a;\n    }\n  };\n\n  lighten = function(a, b) {\n    if (a > b) {\n      return a;\n    } else {\n      return b;\n    }\n  };\n\n  screen = function(a, b) {\n    return 255 * (1 - (1 - a / 255) * (1 - b / 255));\n  };\n\n  overlay = function(a, b) {\n    if (b < 128) {\n      return 2 * a * b / 255;\n    } else {\n      return 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255));\n    }\n  };\n\n  burn = function(a, b) {\n    return 255 * (1 - (1 - b / 255) / (a / 255));\n  };\n\n  dodge = function(a, b) {\n    if (a === 255) {\n      return 255;\n    }\n    a = 255 * (b / 255) / (1 - a / 255);\n    if (a > 255) {\n      return 255;\n    } else {\n      return a;\n    }\n  };\n\n  blend.normal = blend_f(each(normal));\n\n  blend.multiply = blend_f(each(multiply));\n\n  blend.screen = blend_f(each(screen));\n\n  blend.overlay = blend_f(each(overlay));\n\n  blend.darken = blend_f(each(darken));\n\n  blend.lighten = blend_f(each(lighten));\n\n  blend.dodge = blend_f(each(dodge));\n\n  blend.burn = blend_f(each(burn));\n\n  chroma.blend = blend;\n\n  chroma.analyze = function(data) {\n    var len, o, r, val;\n    r = {\n      min: Number.MAX_VALUE,\n      max: Number.MAX_VALUE * -1,\n      sum: 0,\n      values: [],\n      count: 0\n    };\n    for (o = 0, len = data.length; o < len; o++) {\n      val = data[o];\n      if ((val != null) && !isNaN(val)) {\n        r.values.push(val);\n        r.sum += val;\n        if (val < r.min) {\n          r.min = val;\n        }\n        if (val > r.max) {\n          r.max = val;\n        }\n        r.count += 1;\n      }\n    }\n    r.domain = [r.min, r.max];\n    r.limits = function(mode, num) {\n      return chroma.limits(r, mode, num);\n    };\n    return r;\n  };\n\n  chroma.scale = function(colors, positions) {\n    var _classes, _colorCache, _colors, _correctLightness, _domain, _fixed, _gamma, _max, _min, _mode, _nacol, _out, _padding, _pos, _spread, _useCache, classifyValue, f, getClass, getColor, resetCache, setColors, tmap;\n    _mode = 'rgb';\n    _nacol = chroma('#ccc');\n    _spread = 0;\n    _fixed = false;\n    _domain = [0, 1];\n    _pos = [];\n    _padding = [0, 0];\n    _classes = false;\n    _colors = [];\n    _out = false;\n    _min = 0;\n    _max = 1;\n    _correctLightness = false;\n    _colorCache = {};\n    _useCache = true;\n    _gamma = 1;\n    setColors = function(colors) {\n      var c, col, o, ref, ref1, w;\n      if (colors == null) {\n        colors = ['#fff', '#000'];\n      }\n      if ((colors != null) && type(colors) === 'string' && (chroma.brewer != null)) {\n        colors = chroma.brewer[colors] || chroma.brewer[colors.toLowerCase()] || colors;\n      }\n      if (type(colors) === 'array') {\n        colors = colors.slice(0);\n        for (c = o = 0, ref = colors.length - 1; 0 <= ref ? o <= ref : o >= ref; c = 0 <= ref ? ++o : --o) {\n          col = colors[c];\n          if (type(col) === \"string\") {\n            colors[c] = chroma(col);\n          }\n        }\n        _pos.length = 0;\n        for (c = w = 0, ref1 = colors.length - 1; 0 <= ref1 ? w <= ref1 : w >= ref1; c = 0 <= ref1 ? ++w : --w) {\n          _pos.push(c / (colors.length - 1));\n        }\n      }\n      resetCache();\n      return _colors = colors;\n    };\n    getClass = function(value) {\n      var i, n;\n      if (_classes != null) {\n        n = _classes.length - 1;\n        i = 0;\n        while (i < n && value >= _classes[i]) {\n          i++;\n        }\n        return i - 1;\n      }\n      return 0;\n    };\n    tmap = function(t) {\n      return t;\n    };\n    classifyValue = function(value) {\n      var i, maxc, minc, n, val;\n      val = value;\n      if (_classes.length > 2) {\n        n = _classes.length - 1;\n        i = getClass(value);\n        minc = _classes[0] + (_classes[1] - _classes[0]) * (0 + _spread * 0.5);\n        maxc = _classes[n - 1] + (_classes[n] - _classes[n - 1]) * (1 - _spread * 0.5);\n        val = _min + ((_classes[i] + (_classes[i + 1] - _classes[i]) * 0.5 - minc) / (maxc - minc)) * (_max - _min);\n      }\n      return val;\n    };\n    getColor = function(val, bypassMap) {\n      var c, col, i, k, o, p, ref, t;\n      if (bypassMap == null) {\n        bypassMap = false;\n      }\n      if (isNaN(val)) {\n        return _nacol;\n      }\n      if (!bypassMap) {\n        if (_classes && _classes.length > 2) {\n          c = getClass(val);\n          t = c / (_classes.length - 2);\n        } else if (_max !== _min) {\n          t = (val - _min) / (_max - _min);\n        } else {\n          t = 1;\n        }\n      } else {\n        t = val;\n      }\n      if (!bypassMap) {\n        t = tmap(t);\n      }\n      if (_gamma !== 1) {\n        t = pow(t, _gamma);\n      }\n      t = _padding[0] + (t * (1 - _padding[0] - _padding[1]));\n      t = Math.min(1, Math.max(0, t));\n      k = Math.floor(t * 10000);\n      if (_useCache && _colorCache[k]) {\n        col = _colorCache[k];\n      } else {\n        if (type(_colors) === 'array') {\n          for (i = o = 0, ref = _pos.length - 1; 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {\n            p = _pos[i];\n            if (t <= p) {\n              col = _colors[i];\n              break;\n            }\n            if (t >= p && i === _pos.length - 1) {\n              col = _colors[i];\n              break;\n            }\n            if (t > p && t < _pos[i + 1]) {\n              t = (t - p) / (_pos[i + 1] - p);\n              col = chroma.interpolate(_colors[i], _colors[i + 1], t, _mode);\n              break;\n            }\n          }\n        } else if (type(_colors) === 'function') {\n          col = _colors(t);\n        }\n        if (_useCache) {\n          _colorCache[k] = col;\n        }\n      }\n      return col;\n    };\n    resetCache = function() {\n      return _colorCache = {};\n    };\n    setColors(colors);\n    f = function(v) {\n      var c;\n      c = chroma(getColor(v));\n      if (_out && c[_out]) {\n        return c[_out]();\n      } else {\n        return c;\n      }\n    };\n    f.classes = function(classes) {\n      var d;\n      if (classes != null) {\n        if (type(classes) === 'array') {\n          _classes = classes;\n          _domain = [classes[0], classes[classes.length - 1]];\n        } else {\n          d = chroma.analyze(_domain);\n          if (classes === 0) {\n            _classes = [d.min, d.max];\n          } else {\n            _classes = chroma.limits(d, 'e', classes);\n          }\n        }\n        return f;\n      }\n      return _classes;\n    };\n    f.domain = function(domain) {\n      var c, d, k, len, o, ref, w;\n      if (!arguments.length) {\n        return _domain;\n      }\n      _min = domain[0];\n      _max = domain[domain.length - 1];\n      _pos = [];\n      k = _colors.length;\n      if (domain.length === k && _min !== _max) {\n        for (o = 0, len = domain.length; o < len; o++) {\n          d = domain[o];\n          _pos.push((d - _min) / (_max - _min));\n        }\n      } else {\n        for (c = w = 0, ref = k - 1; 0 <= ref ? w <= ref : w >= ref; c = 0 <= ref ? ++w : --w) {\n          _pos.push(c / (k - 1));\n        }\n      }\n      _domain = [_min, _max];\n      return f;\n    };\n    f.mode = function(_m) {\n      if (!arguments.length) {\n        return _mode;\n      }\n      _mode = _m;\n      resetCache();\n      return f;\n    };\n    f.range = function(colors, _pos) {\n      setColors(colors, _pos);\n      return f;\n    };\n    f.out = function(_o) {\n      _out = _o;\n      return f;\n    };\n    f.spread = function(val) {\n      if (!arguments.length) {\n        return _spread;\n      }\n      _spread = val;\n      return f;\n    };\n    f.correctLightness = function(v) {\n      if (v == null) {\n        v = true;\n      }\n      _correctLightness = v;\n      resetCache();\n      if (_correctLightness) {\n        tmap = function(t) {\n          var L0, L1, L_actual, L_diff, L_ideal, max_iter, pol, t0, t1;\n          L0 = getColor(0, true).lab()[0];\n          L1 = getColor(1, true).lab()[0];\n          pol = L0 > L1;\n          L_actual = getColor(t, true).lab()[0];\n          L_ideal = L0 + (L1 - L0) * t;\n          L_diff = L_actual - L_ideal;\n          t0 = 0;\n          t1 = 1;\n          max_iter = 20;\n          while (Math.abs(L_diff) > 1e-2 && max_iter-- > 0) {\n            (function() {\n              if (pol) {\n                L_diff *= -1;\n              }\n              if (L_diff < 0) {\n                t0 = t;\n                t += (t1 - t) * 0.5;\n              } else {\n                t1 = t;\n                t += (t0 - t) * 0.5;\n              }\n              L_actual = getColor(t, true).lab()[0];\n              return L_diff = L_actual - L_ideal;\n            })();\n          }\n          return t;\n        };\n      } else {\n        tmap = function(t) {\n          return t;\n        };\n      }\n      return f;\n    };\n    f.padding = function(p) {\n      if (p != null) {\n        if (type(p) === 'number') {\n          p = [p, p];\n        }\n        _padding = p;\n        return f;\n      } else {\n        return _padding;\n      }\n    };\n    f.colors = function(numColors, out) {\n      var dd, dm, i, o, ref, result, results, samples, w;\n      if (arguments.length < 2) {\n        out = 'hex';\n      }\n      result = [];\n      if (arguments.length === 0) {\n        result = _colors.slice(0);\n      } else if (numColors === 1) {\n        result = [f(0.5)];\n      } else if (numColors > 1) {\n        dm = _domain[0];\n        dd = _domain[1] - dm;\n        result = (function() {\n          results = [];\n          for (var o = 0; 0 <= numColors ? o < numColors : o > numColors; 0 <= numColors ? o++ : o--){ results.push(o); }\n          return results;\n        }).apply(this).map(function(i) {\n          return f(dm + i / (numColors - 1) * dd);\n        });\n      } else {\n        colors = [];\n        samples = [];\n        if (_classes && _classes.length > 2) {\n          for (i = w = 1, ref = _classes.length; 1 <= ref ? w < ref : w > ref; i = 1 <= ref ? ++w : --w) {\n            samples.push((_classes[i - 1] + _classes[i]) * 0.5);\n          }\n        } else {\n          samples = _domain;\n        }\n        result = samples.map(function(v) {\n          return f(v);\n        });\n      }\n      if (chroma[out]) {\n        result = result.map(function(c) {\n          return c[out]();\n        });\n      }\n      return result;\n    };\n    f.cache = function(c) {\n      if (c != null) {\n        _useCache = c;\n        return f;\n      } else {\n        return _useCache;\n      }\n    };\n    f.gamma = function(g) {\n      if (g != null) {\n        _gamma = g;\n        return f;\n      } else {\n        return _gamma;\n      }\n    };\n    return f;\n  };\n\n  if (chroma.scales == null) {\n    chroma.scales = {};\n  }\n\n  chroma.scales.cool = function() {\n    return chroma.scale([chroma.hsl(180, 1, .9), chroma.hsl(250, .7, .4)]);\n  };\n\n  chroma.scales.hot = function() {\n    return chroma.scale(['#000', '#f00', '#ff0', '#fff'], [0, .25, .75, 1]).mode('rgb');\n  };\n\n  chroma.analyze = function(data, key, filter) {\n    var add, k, len, o, r, val, visit;\n    r = {\n      min: Number.MAX_VALUE,\n      max: Number.MAX_VALUE * -1,\n      sum: 0,\n      values: [],\n      count: 0\n    };\n    if (filter == null) {\n      filter = function() {\n        return true;\n      };\n    }\n    add = function(val) {\n      if ((val != null) && !isNaN(val)) {\n        r.values.push(val);\n        r.sum += val;\n        if (val < r.min) {\n          r.min = val;\n        }\n        if (val > r.max) {\n          r.max = val;\n        }\n        r.count += 1;\n      }\n    };\n    visit = function(val, k) {\n      if (filter(val, k)) {\n        if ((key != null) && type(key) === 'function') {\n          return add(key(val));\n        } else if ((key != null) && type(key) === 'string' || type(key) === 'number') {\n          return add(val[key]);\n        } else {\n          return add(val);\n        }\n      }\n    };\n    if (type(data) === 'array') {\n      for (o = 0, len = data.length; o < len; o++) {\n        val = data[o];\n        visit(val);\n      }\n    } else {\n      for (k in data) {\n        val = data[k];\n        visit(val, k);\n      }\n    }\n    r.domain = [r.min, r.max];\n    r.limits = function(mode, num) {\n      return chroma.limits(r, mode, num);\n    };\n    return r;\n  };\n\n  chroma.limits = function(data, mode, num) {\n    var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, assignments, best, centroids, cluster, clusterSizes, dist, i, j, kClusters, limits, max_log, min, min_log, mindist, n, nb_iters, newCentroids, o, p, pb, pr, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, repeat, sum, tmpKMeansBreaks, v, value, values, w;\n    if (mode == null) {\n      mode = 'equal';\n    }\n    if (num == null) {\n      num = 7;\n    }\n    if (type(data) === 'array') {\n      data = chroma.analyze(data);\n    }\n    min = data.min;\n    max = data.max;\n    sum = data.sum;\n    values = data.values.sort(function(a, b) {\n      return a - b;\n    });\n    if (num === 1) {\n      return [min, max];\n    }\n    limits = [];\n    if (mode.substr(0, 1) === 'c') {\n      limits.push(min);\n      limits.push(max);\n    }\n    if (mode.substr(0, 1) === 'e') {\n      limits.push(min);\n      for (i = o = 1, ref = num - 1; 1 <= ref ? o <= ref : o >= ref; i = 1 <= ref ? ++o : --o) {\n        limits.push(min + (i / num) * (max - min));\n      }\n      limits.push(max);\n    } else if (mode.substr(0, 1) === 'l') {\n      if (min <= 0) {\n        throw 'Logarithmic scales are only possible for values > 0';\n      }\n      min_log = Math.LOG10E * log(min);\n      max_log = Math.LOG10E * log(max);\n      limits.push(min);\n      for (i = w = 1, ref1 = num - 1; 1 <= ref1 ? w <= ref1 : w >= ref1; i = 1 <= ref1 ? ++w : --w) {\n        limits.push(pow(10, min_log + (i / num) * (max_log - min_log)));\n      }\n      limits.push(max);\n    } else if (mode.substr(0, 1) === 'q') {\n      limits.push(min);\n      for (i = aa = 1, ref2 = num - 1; 1 <= ref2 ? aa <= ref2 : aa >= ref2; i = 1 <= ref2 ? ++aa : --aa) {\n        p = (values.length - 1) * i / num;\n        pb = floor(p);\n        if (pb === p) {\n          limits.push(values[pb]);\n        } else {\n          pr = p - pb;\n          limits.push(values[pb] * (1 - pr) + values[pb + 1] * pr);\n        }\n      }\n      limits.push(max);\n    } else if (mode.substr(0, 1) === 'k') {\n\n      /*\n      implementation based on\n      http://code.google.com/p/figue/source/browse/trunk/figue.js#336\n      simplified for 1-d input values\n       */\n      n = values.length;\n      assignments = new Array(n);\n      clusterSizes = new Array(num);\n      repeat = true;\n      nb_iters = 0;\n      centroids = null;\n      centroids = [];\n      centroids.push(min);\n      for (i = ab = 1, ref3 = num - 1; 1 <= ref3 ? ab <= ref3 : ab >= ref3; i = 1 <= ref3 ? ++ab : --ab) {\n        centroids.push(min + (i / num) * (max - min));\n      }\n      centroids.push(max);\n      while (repeat) {\n        for (j = ac = 0, ref4 = num - 1; 0 <= ref4 ? ac <= ref4 : ac >= ref4; j = 0 <= ref4 ? ++ac : --ac) {\n          clusterSizes[j] = 0;\n        }\n        for (i = ad = 0, ref5 = n - 1; 0 <= ref5 ? ad <= ref5 : ad >= ref5; i = 0 <= ref5 ? ++ad : --ad) {\n          value = values[i];\n          mindist = Number.MAX_VALUE;\n          for (j = ae = 0, ref6 = num - 1; 0 <= ref6 ? ae <= ref6 : ae >= ref6; j = 0 <= ref6 ? ++ae : --ae) {\n            dist = abs(centroids[j] - value);\n            if (dist < mindist) {\n              mindist = dist;\n              best = j;\n            }\n          }\n          clusterSizes[best]++;\n          assignments[i] = best;\n        }\n        newCentroids = new Array(num);\n        for (j = af = 0, ref7 = num - 1; 0 <= ref7 ? af <= ref7 : af >= ref7; j = 0 <= ref7 ? ++af : --af) {\n          newCentroids[j] = null;\n        }\n        for (i = ag = 0, ref8 = n - 1; 0 <= ref8 ? ag <= ref8 : ag >= ref8; i = 0 <= ref8 ? ++ag : --ag) {\n          cluster = assignments[i];\n          if (newCentroids[cluster] === null) {\n            newCentroids[cluster] = values[i];\n          } else {\n            newCentroids[cluster] += values[i];\n          }\n        }\n        for (j = ah = 0, ref9 = num - 1; 0 <= ref9 ? ah <= ref9 : ah >= ref9; j = 0 <= ref9 ? ++ah : --ah) {\n          newCentroids[j] *= 1 / clusterSizes[j];\n        }\n        repeat = false;\n        for (j = ai = 0, ref10 = num - 1; 0 <= ref10 ? ai <= ref10 : ai >= ref10; j = 0 <= ref10 ? ++ai : --ai) {\n          if (newCentroids[j] !== centroids[i]) {\n            repeat = true;\n            break;\n          }\n        }\n        centroids = newCentroids;\n        nb_iters++;\n        if (nb_iters > 200) {\n          repeat = false;\n        }\n      }\n      kClusters = {};\n      for (j = aj = 0, ref11 = num - 1; 0 <= ref11 ? aj <= ref11 : aj >= ref11; j = 0 <= ref11 ? ++aj : --aj) {\n        kClusters[j] = [];\n      }\n      for (i = ak = 0, ref12 = n - 1; 0 <= ref12 ? ak <= ref12 : ak >= ref12; i = 0 <= ref12 ? ++ak : --ak) {\n        cluster = assignments[i];\n        kClusters[cluster].push(values[i]);\n      }\n      tmpKMeansBreaks = [];\n      for (j = al = 0, ref13 = num - 1; 0 <= ref13 ? al <= ref13 : al >= ref13; j = 0 <= ref13 ? ++al : --al) {\n        tmpKMeansBreaks.push(kClusters[j][0]);\n        tmpKMeansBreaks.push(kClusters[j][kClusters[j].length - 1]);\n      }\n      tmpKMeansBreaks = tmpKMeansBreaks.sort(function(a, b) {\n        return a - b;\n      });\n      limits.push(tmpKMeansBreaks[0]);\n      for (i = am = 1, ref14 = tmpKMeansBreaks.length - 1; am <= ref14; i = am += 2) {\n        v = tmpKMeansBreaks[i];\n        if (!isNaN(v) && limits.indexOf(v) === -1) {\n          limits.push(v);\n        }\n      }\n    }\n    return limits;\n  };\n\n  hsi2rgb = function(h, s, i) {\n\n    /*\n    borrowed from here:\n    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp\n     */\n    var args, b, g, r;\n    args = unpack(arguments);\n    h = args[0], s = args[1], i = args[2];\n    if (isNaN(h)) {\n      h = 0;\n    }\n    h /= 360;\n    if (h < 1 / 3) {\n      b = (1 - s) / 3;\n      r = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;\n      g = 1 - (b + r);\n    } else if (h < 2 / 3) {\n      h -= 1 / 3;\n      r = (1 - s) / 3;\n      g = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;\n      b = 1 - (r + g);\n    } else {\n      h -= 2 / 3;\n      g = (1 - s) / 3;\n      b = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;\n      r = 1 - (g + b);\n    }\n    r = limit(i * r * 3);\n    g = limit(i * g * 3);\n    b = limit(i * b * 3);\n    return [r * 255, g * 255, b * 255, args.length > 3 ? args[3] : 1];\n  };\n\n  rgb2hsi = function() {\n\n    /*\n    borrowed from here:\n    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp\n     */\n    var b, g, h, i, min, r, ref, s;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    TWOPI = Math.PI * 2;\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    min = Math.min(r, g, b);\n    i = (r + g + b) / 3;\n    s = 1 - min / i;\n    if (s === 0) {\n      h = 0;\n    } else {\n      h = ((r - g) + (r - b)) / 2;\n      h /= Math.sqrt((r - g) * (r - g) + (r - b) * (g - b));\n      h = Math.acos(h);\n      if (b > g) {\n        h = TWOPI - h;\n      }\n      h /= TWOPI;\n    }\n    return [h * 360, s, i];\n  };\n\n  chroma.hsi = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['hsi']), function(){});\n  };\n\n  _input.hsi = hsi2rgb;\n\n  Color.prototype.hsi = function() {\n    return rgb2hsi(this._rgb);\n  };\n\n  interpolate_hsx = function(col1, col2, f, m) {\n    var dh, hue, hue0, hue1, lbv, lbv0, lbv1, res, sat, sat0, sat1, xyz0, xyz1;\n    if (m === 'hsl') {\n      xyz0 = col1.hsl();\n      xyz1 = col2.hsl();\n    } else if (m === 'hsv') {\n      xyz0 = col1.hsv();\n      xyz1 = col2.hsv();\n    } else if (m === 'hcg') {\n      xyz0 = col1.hcg();\n      xyz1 = col2.hcg();\n    } else if (m === 'hsi') {\n      xyz0 = col1.hsi();\n      xyz1 = col2.hsi();\n    } else if (m === 'lch' || m === 'hcl') {\n      m = 'hcl';\n      xyz0 = col1.hcl();\n      xyz1 = col2.hcl();\n    }\n    if (m.substr(0, 1) === 'h') {\n      hue0 = xyz0[0], sat0 = xyz0[1], lbv0 = xyz0[2];\n      hue1 = xyz1[0], sat1 = xyz1[1], lbv1 = xyz1[2];\n    }\n    if (!isNaN(hue0) && !isNaN(hue1)) {\n      if (hue1 > hue0 && hue1 - hue0 > 180) {\n        dh = hue1 - (hue0 + 360);\n      } else if (hue1 < hue0 && hue0 - hue1 > 180) {\n        dh = hue1 + 360 - hue0;\n      } else {\n        dh = hue1 - hue0;\n      }\n      hue = hue0 + f * dh;\n    } else if (!isNaN(hue0)) {\n      hue = hue0;\n      if ((lbv1 === 1 || lbv1 === 0) && m !== 'hsv') {\n        sat = sat0;\n      }\n    } else if (!isNaN(hue1)) {\n      hue = hue1;\n      if ((lbv0 === 1 || lbv0 === 0) && m !== 'hsv') {\n        sat = sat1;\n      }\n    } else {\n      hue = Number.NaN;\n    }\n    if (sat == null) {\n      sat = sat0 + f * (sat1 - sat0);\n    }\n    lbv = lbv0 + f * (lbv1 - lbv0);\n    return res = chroma[m](hue, sat, lbv);\n  };\n\n  _interpolators = _interpolators.concat((function() {\n    var len, o, ref, results;\n    ref = ['hsv', 'hsl', 'hsi', 'hcl', 'lch', 'hcg'];\n    results = [];\n    for (o = 0, len = ref.length; o < len; o++) {\n      m = ref[o];\n      results.push([m, interpolate_hsx]);\n    }\n    return results;\n  })());\n\n  interpolate_num = function(col1, col2, f, m) {\n    var n1, n2;\n    n1 = col1.num();\n    n2 = col2.num();\n    return chroma.num(n1 + (n2 - n1) * f, 'num');\n  };\n\n  _interpolators.push(['num', interpolate_num]);\n\n  interpolate_lab = function(col1, col2, f, m) {\n    var res, xyz0, xyz1;\n    xyz0 = col1.lab();\n    xyz1 = col2.lab();\n    return res = new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);\n  };\n\n  _interpolators.push(['lab', interpolate_lab]);\n\n}).call(this);\n","module.exports = require(\"react\");"],"sourceRoot":""}