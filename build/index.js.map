{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/MunkerIllusion.jsx","webpack:///(webpack)/buildin/module.js","webpack:///./node_modules/chroma-js/chroma.js","webpack:///external \"react\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","_react","MunkerIllusion","props","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","myRef","React","createRef","widthRef","lightnessRef","offsetRef","widthChange","bind","lightnessChange","offsetChange","scaleBackground","chroma","scale","correctLightness","scaleBar","width","height","Component","go","event","y","lightness","Number","current","offset","backgroundColor","hex","barColor","svg","innerHTML","style","background","line","document","createElementNS","setAttribute","appendChild","cline1","cline2","label_text","min","max","step","defaultValue","ref","callback","_react2","default","createElement","display","vertical-align","font-size","float","type","onInput","onChange","labeled_slider","margin","webpackPolyfill","deprecate","paths","children","Color","DEG2RAD","LAB_CONSTANTS","PI","PITHIRD","RAD2DEG","TWOPI","_average_lrgb","_guess_formats","_guess_formats_sorted","_input","_interpolators","abs","atan2","bezier","blend","blend_f","brewer","burn","clip_rgb","cmyk2rgb","cos","css2rgb","darken","dodge","each","floor","hcg2rgb","hex2rgb","hsi2rgb","hsl2css","hsl2rgb","hsv2rgb","interpolate","interpolate_hsx","interpolate_lab","interpolate_lrgb","interpolate_num","interpolate_rgb","lab2lch","lab2rgb","lab_xyz","lch2lab","lch2rgb","lighten","limit","log","luminance_x","multiply","num2rgb","overlay","pow","rgb2cmyk","rgb2css","rgb2hcg","rgb2hex","rgb2hsi","rgb2hsl","rgb2hsv","rgb2lab","rgb2lch","rgb2luminance","rgb2num","rgb2temperature","rgb2xyz","rgb_xyz","rnd","round","screen","sin","sqrt","temperature2rgb","unpack","w3cx11","xyz_lab","xyz_rgb","slice","classToType","len","split","length","toLowerCase","obj","strType","toString","x","args","Array","rgb","_clipped","_unclipped","Math","arguments","func","ctor","child","result","apply","undefined","__WEBPACK_AMD_DEFINE_RESULT__","version","arg","chk","len1","me","mode","w","push","_rgb","sort","a","b","test","console","warn","clone","OrRd","PuBu","BuPu","Oranges","BuGn","YlOrBr","YlGn","Reds","RdPu","Greens","YlGnBu","Purples","GnBu","Greys","YlOrRd","PuRd","Blues","PuBuGn","Viridis","Spectral","RdYlGn","RdBu","PiYG","PRGn","RdYlBu","BrBG","RdGy","PuOr","Set2","Accent","Set1","Set3","Dark2","Paired","Pastel2","Pastel1","key","results","colors","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflower","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","laserlemon","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrod","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","maroon2","maroon3","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","purple2","purple3","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","z","isNaN","Yn","Xn","Zn","t","t1","t2","t0","Kn","t3","g","ref1","lab","concat","I","I0","I1","lab0","lab1","lab2","lab3","ref2","f","cubehelix","start","rotations","hue","gamma","dh","dl","fract","amp","cos_a","sin_a","h","random","code","charAt","col1","col2","interpol","res","alpha","mix","k","v","map","rgba","lrgb","xyz0","xyz1","xyz","average","A","cnt","dx","dy","first","xyz2","splice","u","match","substr","parseInt","css","channels","hxa","str","NaN","hsl","q","ref3","ref4","ref5","delta","hsv","num","_c","_g","hcg","aa","ab","join","named","L","lch","hcl","reverse","cmyk","gl","luminance","lum","cur_lum","eps","max_iter","lm","kelvin","temp","maxTemp","minTemp","temperature","K","contrast","l1","l2","distance","sum_sq","deltaE","C","L1","L2","a1","a2","b1","b2","c1","c2","c4","delA","delB","delC","h1","sc","sl","v1","v2","v3","modechan","channel","src","indexOf","set","clipped","amount","brighten","darker","brighter","saturate","desaturate","premultiply","bottom","top","normal","c0","out","analyze","data","val","MAX_VALUE","sum","values","count","domain","limits","positions","_classes","_colorCache","_colors","_correctLightness","_domain","_gamma","_max","_min","_mode","_nacol","_out","_padding","_pos","_spread","_useCache","getClass","getColor","resetCache","setColors","tmap","col","maxc","minc","bypassMap","classes","_m","range","_o","spread","L0","L_actual","L_diff","L_ideal","pol","padding","numColors","dd","dm","samples","cache","scales","cool","hot","filter","add","visit","ac","ad","ae","af","ag","ah","ai","aj","ak","al","am","assignments","best","centroids","cluster","clusterSizes","dist","j","kClusters","max_log","min_log","mindist","nb_iters","newCentroids","pb","pr","ref10","ref11","ref12","ref13","ref14","ref6","ref7","ref8","ref9","repeat","tmpKMeansBreaks","LOG10E","acos","hsi","hue0","hue1","lbv0","lbv1","sat","sat0","sat1","n1","n2","require"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import React, {Component} from 'react';\nimport chroma from 'chroma-js';\n\nclass MunkerIllusion extends Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n    this.widthRef = React.createRef();\n    this.lightnessRef = React.createRef();\n    this.offsetRef = React.createRef();\n\n    this.widthChange = this.widthChange.bind(this);\n    this.lightnessChange = this.lightnessChange.bind(this);\n    this.offsetChange = this.offsetChange.bind(this);\n\n    this.scaleBackground = chroma.scale(['blue', 'white']).correctLightness();\n    this.scaleBar = chroma.scale(['yellow', 'white']).correctLightness();\n\n    this.width=350;\n    this.height=200;\n  }\n\n  componentDidMount() {\n    this.go();\n  }\n\n  widthChange(event) {\n    this.go();\n  }\n  \n  lightnessChange(event) {\n    this.go();\n  }\n\n  offsetChange(event) {\n    this.go();\n  }\n\n  go() {\n    let lightness = Number(this.lightnessRef.current.value);\n    let width = Number(this.widthRef.current.value);\n    let offset = Number(this.offsetRef.current.value);\n\n    let backgroundColor = this.scaleBackground(lightness).hex();\n    let barColor = this.scaleBar(lightness).hex();\n    let objColor = 'red';\n\n    let svg = this.myRef.current;\n    svg.innerHTML = '';\n    svg.style.background = backgroundColor;\n\n    var y;\n\n\n    for (y=width/2; y<=this.height+width; y+=width*2) {\n      let line = document.createElementNS('http://www.w3.org/2000/svg',\n                                          'line');\n      \n      line.setAttribute('x1', 0);\n      line.setAttribute('y1', y);\n      line.setAttribute('x2', this.width);\n      line.setAttribute('y2', y);\n      \n      line.setAttribute('stroke', barColor);\n      line.setAttribute('stroke-width', width);\n      svg.appendChild(line);\n      \n      if (y > 50 && y < 150) {\n        let cline1 = document.createElementNS('http://www.w3.org/2000/svg',\n                                              'line');\n\n        cline1.setAttribute('x1', 50);\n        cline1.setAttribute('y1', y);\n        cline1.setAttribute('x2', 150);\n        cline1.setAttribute('y2', y);\n        \n        cline1.setAttribute('stroke', objColor);\n        cline1.setAttribute('stroke-width', width);        \n        \n        svg.appendChild(cline1);        \n\n        let cline2 = document.createElementNS('http://www.w3.org/2000/svg',\n                                              'line');\n\n        cline2.setAttribute('x1', 200);\n        cline2.setAttribute('y1', y+width - offset*width);\n        cline2.setAttribute('x2', 300);\n        cline2.setAttribute('y2', y+width - offset*width);\n        \n        cline2.setAttribute('stroke', objColor);\n        cline2.setAttribute('stroke-width', width);        \n        \n        let yy = y+width;\n        svg.appendChild(cline2);        \n      }\n\n    }\n  }\n\n  labeled_slider(label_text, min, max, step, defaultValue, ref, callback) {\n    return (\n          <div style={{display: 'block', width: '350px'}}>\n            <div style={{'display': 'table-cell', 'vertical-align': 'top',\n                 'width': '350px'}}>\n              <label style={{'font-size': '1.0rem', 'vertical-align': 'middle'}}>\n                {label_text}</label>\n              \n              <div style={{'width': '150px', 'float':'right'}}>\n                <input type=\"range\" ref={ref} \n                       min={min} max={max} step={step} defaultValue={defaultValue}\n                       onInput={callback}  onChange={callback}\n                       style={{'vertical-align':'middle'}}/>\n              </div>\n            </div>\n          </div>\n    );\n  }\n  render() {\n    return (\n      <div>\n        <div style={{display: 'inline'}}>\n\n          {this.labeled_slider(\"Grating Width\", 1, 50, 1, 5, \n                               this.widthRef, this.widthChange)}\n\n          {this.labeled_slider(\"Background Lightness\", 0, 1, 0.01, 0, \n                               this.lightnessRef, this.lightnessChange)}\n\n          {this.labeled_slider(\"Grating Offset\", 0, 1, 0.05, 0,\n                               this.offsetRef, this.offsetChange)}\n          \n        </div>\n\n        <div style={{display: 'block', margin: 'auto'}}>\n          <svg width={this.width} height={this.height} ref={this.myRef}\n               style={{display: 'block', margin: 'auto'}}>\n          </svg>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default MunkerIllusion;\n","module.exports = function(module) {\r\n\tif (!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif (!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n","\n/**\n * @license\n *\n * chroma.js - JavaScript library for color conversions\n * \n * Copyright (c) 2011-2017, Gregor Aisch\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * \n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n * \n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n * \n * 3. The name Gregor Aisch may not be used to endorse or promote products\n *    derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n */\n\n(function() {\n  var Color, DEG2RAD, LAB_CONSTANTS, PI, PITHIRD, RAD2DEG, TWOPI, _average_lrgb, _guess_formats, _guess_formats_sorted, _input, _interpolators, abs, atan2, bezier, blend, blend_f, brewer, burn, chroma, clip_rgb, cmyk2rgb, colors, cos, css2rgb, darken, dodge, each, floor, hcg2rgb, hex2rgb, hsi2rgb, hsl2css, hsl2rgb, hsv2rgb, interpolate, interpolate_hsx, interpolate_lab, interpolate_lrgb, interpolate_num, interpolate_rgb, lab2lch, lab2rgb, lab_xyz, lch2lab, lch2rgb, lighten, limit, log, luminance_x, m, max, multiply, normal, num2rgb, overlay, pow, rgb2cmyk, rgb2css, rgb2hcg, rgb2hex, rgb2hsi, rgb2hsl, rgb2hsv, rgb2lab, rgb2lch, rgb2luminance, rgb2num, rgb2temperature, rgb2xyz, rgb_xyz, rnd, root, round, screen, sin, sqrt, temperature2rgb, type, unpack, w3cx11, xyz_lab, xyz_rgb,\n    slice = [].slice;\n\n  type = (function() {\n\n    /*\n    for browser-safe type checking+\n    ported from jQuery's $.type\n     */\n    var classToType, len, name, o, ref;\n    classToType = {};\n    ref = \"Boolean Number String Function Array Date RegExp Undefined Null\".split(\" \");\n    for (o = 0, len = ref.length; o < len; o++) {\n      name = ref[o];\n      classToType[\"[object \" + name + \"]\"] = name.toLowerCase();\n    }\n    return function(obj) {\n      var strType;\n      strType = Object.prototype.toString.call(obj);\n      return classToType[strType] || \"object\";\n    };\n  })();\n\n  limit = function(x, min, max) {\n    if (min == null) {\n      min = 0;\n    }\n    if (max == null) {\n      max = 1;\n    }\n    if (x < min) {\n      x = min;\n    }\n    if (x > max) {\n      x = max;\n    }\n    return x;\n  };\n\n  unpack = function(args) {\n    if (args.length >= 3) {\n      return Array.prototype.slice.call(args);\n    } else {\n      return args[0];\n    }\n  };\n\n  clip_rgb = function(rgb) {\n    var i, o;\n    rgb._clipped = false;\n    rgb._unclipped = rgb.slice(0);\n    for (i = o = 0; o < 3; i = ++o) {\n      if (i < 3) {\n        if (rgb[i] < 0 || rgb[i] > 255) {\n          rgb._clipped = true;\n        }\n        if (rgb[i] < 0) {\n          rgb[i] = 0;\n        }\n        if (rgb[i] > 255) {\n          rgb[i] = 255;\n        }\n      } else if (i === 3) {\n        if (rgb[i] < 0) {\n          rgb[i] = 0;\n        }\n        if (rgb[i] > 1) {\n          rgb[i] = 1;\n        }\n      }\n    }\n    if (!rgb._clipped) {\n      delete rgb._unclipped;\n    }\n    return rgb;\n  };\n\n  PI = Math.PI, round = Math.round, cos = Math.cos, floor = Math.floor, pow = Math.pow, log = Math.log, sin = Math.sin, sqrt = Math.sqrt, atan2 = Math.atan2, max = Math.max, abs = Math.abs;\n\n  TWOPI = PI * 2;\n\n  PITHIRD = PI / 3;\n\n  DEG2RAD = PI / 180;\n\n  RAD2DEG = 180 / PI;\n\n  chroma = function() {\n    if (arguments[0] instanceof Color) {\n      return arguments[0];\n    }\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, arguments, function(){});\n  };\n\n  chroma[\"default\"] = chroma;\n\n  _interpolators = [];\n\n  if ((typeof module !== \"undefined\" && module !== null) && (module.exports != null)) {\n    module.exports = chroma;\n  }\n\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return chroma;\n    });\n  } else {\n    root = typeof exports !== \"undefined\" && exports !== null ? exports : this;\n    root.chroma = chroma;\n  }\n\n  chroma.version = '1.3.7';\n\n  _input = {};\n\n  _guess_formats = [];\n\n  _guess_formats_sorted = false;\n\n  Color = (function() {\n    function Color() {\n      var arg, args, chk, len, len1, me, mode, o, w;\n      me = this;\n      args = [];\n      for (o = 0, len = arguments.length; o < len; o++) {\n        arg = arguments[o];\n        if (arg != null) {\n          args.push(arg);\n        }\n      }\n      if (args.length > 1) {\n        mode = args[args.length - 1];\n      }\n      if (_input[mode] != null) {\n        me._rgb = clip_rgb(_input[mode](unpack(args.slice(0, -1))));\n      } else {\n        if (!_guess_formats_sorted) {\n          _guess_formats = _guess_formats.sort(function(a, b) {\n            return b.p - a.p;\n          });\n          _guess_formats_sorted = true;\n        }\n        for (w = 0, len1 = _guess_formats.length; w < len1; w++) {\n          chk = _guess_formats[w];\n          mode = chk.test.apply(chk, args);\n          if (mode) {\n            break;\n          }\n        }\n        if (mode) {\n          me._rgb = clip_rgb(_input[mode].apply(_input, args));\n        }\n      }\n      if (me._rgb == null) {\n        console.warn('unknown format: ' + args);\n      }\n      if (me._rgb == null) {\n        me._rgb = [0, 0, 0];\n      }\n      if (me._rgb.length === 3) {\n        me._rgb.push(1);\n      }\n    }\n\n    Color.prototype.toString = function() {\n      return this.hex();\n    };\n\n    Color.prototype.clone = function() {\n      return chroma(me._rgb);\n    };\n\n    return Color;\n\n  })();\n\n  chroma._input = _input;\n\n\n  /**\n  \tColorBrewer colors for chroma.js\n  \n  \tCopyright (c) 2002 Cynthia Brewer, Mark Harrower, and The \n  \tPennsylvania State University.\n  \n  \tLicensed under the Apache License, Version 2.0 (the \"License\"); \n  \tyou may not use this file except in compliance with the License.\n  \tYou may obtain a copy of the License at\t\n  \thttp://www.apache.org/licenses/LICENSE-2.0\n  \n  \tUnless required by applicable law or agreed to in writing, software distributed\n  \tunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n  \tCONDITIONS OF ANY KIND, either express or implied. See the License for the\n  \tspecific language governing permissions and limitations under the License.\n  \n      @preserve\n   */\n\n  chroma.brewer = brewer = {\n    OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],\n    PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],\n    BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],\n    Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],\n    BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],\n    YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],\n    YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],\n    Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],\n    RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],\n    Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],\n    YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],\n    Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],\n    GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],\n    Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],\n    YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],\n    PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],\n    Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],\n    PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],\n    Viridis: ['#440154', '#482777', '#3f4a8a', '#31678e', '#26838f', '#1f9d8a', '#6cce5a', '#b6de2b', '#fee825'],\n    Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],\n    RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],\n    RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],\n    PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],\n    PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],\n    RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],\n    BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],\n    RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],\n    PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],\n    Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],\n    Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],\n    Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],\n    Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],\n    Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],\n    Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],\n    Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],\n    Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2']\n  };\n\n  (function() {\n    var key, results;\n    results = [];\n    for (key in brewer) {\n      results.push(brewer[key.toLowerCase()] = brewer[key]);\n    }\n    return results;\n  })();\n\n\n  /**\n  \tX11 color names\n  \n  \thttp://www.w3.org/TR/css3-color/#svg-color\n   */\n\n  w3cx11 = {\n    aliceblue: '#f0f8ff',\n    antiquewhite: '#faebd7',\n    aqua: '#00ffff',\n    aquamarine: '#7fffd4',\n    azure: '#f0ffff',\n    beige: '#f5f5dc',\n    bisque: '#ffe4c4',\n    black: '#000000',\n    blanchedalmond: '#ffebcd',\n    blue: '#0000ff',\n    blueviolet: '#8a2be2',\n    brown: '#a52a2a',\n    burlywood: '#deb887',\n    cadetblue: '#5f9ea0',\n    chartreuse: '#7fff00',\n    chocolate: '#d2691e',\n    coral: '#ff7f50',\n    cornflower: '#6495ed',\n    cornflowerblue: '#6495ed',\n    cornsilk: '#fff8dc',\n    crimson: '#dc143c',\n    cyan: '#00ffff',\n    darkblue: '#00008b',\n    darkcyan: '#008b8b',\n    darkgoldenrod: '#b8860b',\n    darkgray: '#a9a9a9',\n    darkgreen: '#006400',\n    darkgrey: '#a9a9a9',\n    darkkhaki: '#bdb76b',\n    darkmagenta: '#8b008b',\n    darkolivegreen: '#556b2f',\n    darkorange: '#ff8c00',\n    darkorchid: '#9932cc',\n    darkred: '#8b0000',\n    darksalmon: '#e9967a',\n    darkseagreen: '#8fbc8f',\n    darkslateblue: '#483d8b',\n    darkslategray: '#2f4f4f',\n    darkslategrey: '#2f4f4f',\n    darkturquoise: '#00ced1',\n    darkviolet: '#9400d3',\n    deeppink: '#ff1493',\n    deepskyblue: '#00bfff',\n    dimgray: '#696969',\n    dimgrey: '#696969',\n    dodgerblue: '#1e90ff',\n    firebrick: '#b22222',\n    floralwhite: '#fffaf0',\n    forestgreen: '#228b22',\n    fuchsia: '#ff00ff',\n    gainsboro: '#dcdcdc',\n    ghostwhite: '#f8f8ff',\n    gold: '#ffd700',\n    goldenrod: '#daa520',\n    gray: '#808080',\n    green: '#008000',\n    greenyellow: '#adff2f',\n    grey: '#808080',\n    honeydew: '#f0fff0',\n    hotpink: '#ff69b4',\n    indianred: '#cd5c5c',\n    indigo: '#4b0082',\n    ivory: '#fffff0',\n    khaki: '#f0e68c',\n    laserlemon: '#ffff54',\n    lavender: '#e6e6fa',\n    lavenderblush: '#fff0f5',\n    lawngreen: '#7cfc00',\n    lemonchiffon: '#fffacd',\n    lightblue: '#add8e6',\n    lightcoral: '#f08080',\n    lightcyan: '#e0ffff',\n    lightgoldenrod: '#fafad2',\n    lightgoldenrodyellow: '#fafad2',\n    lightgray: '#d3d3d3',\n    lightgreen: '#90ee90',\n    lightgrey: '#d3d3d3',\n    lightpink: '#ffb6c1',\n    lightsalmon: '#ffa07a',\n    lightseagreen: '#20b2aa',\n    lightskyblue: '#87cefa',\n    lightslategray: '#778899',\n    lightslategrey: '#778899',\n    lightsteelblue: '#b0c4de',\n    lightyellow: '#ffffe0',\n    lime: '#00ff00',\n    limegreen: '#32cd32',\n    linen: '#faf0e6',\n    magenta: '#ff00ff',\n    maroon: '#800000',\n    maroon2: '#7f0000',\n    maroon3: '#b03060',\n    mediumaquamarine: '#66cdaa',\n    mediumblue: '#0000cd',\n    mediumorchid: '#ba55d3',\n    mediumpurple: '#9370db',\n    mediumseagreen: '#3cb371',\n    mediumslateblue: '#7b68ee',\n    mediumspringgreen: '#00fa9a',\n    mediumturquoise: '#48d1cc',\n    mediumvioletred: '#c71585',\n    midnightblue: '#191970',\n    mintcream: '#f5fffa',\n    mistyrose: '#ffe4e1',\n    moccasin: '#ffe4b5',\n    navajowhite: '#ffdead',\n    navy: '#000080',\n    oldlace: '#fdf5e6',\n    olive: '#808000',\n    olivedrab: '#6b8e23',\n    orange: '#ffa500',\n    orangered: '#ff4500',\n    orchid: '#da70d6',\n    palegoldenrod: '#eee8aa',\n    palegreen: '#98fb98',\n    paleturquoise: '#afeeee',\n    palevioletred: '#db7093',\n    papayawhip: '#ffefd5',\n    peachpuff: '#ffdab9',\n    peru: '#cd853f',\n    pink: '#ffc0cb',\n    plum: '#dda0dd',\n    powderblue: '#b0e0e6',\n    purple: '#800080',\n    purple2: '#7f007f',\n    purple3: '#a020f0',\n    rebeccapurple: '#663399',\n    red: '#ff0000',\n    rosybrown: '#bc8f8f',\n    royalblue: '#4169e1',\n    saddlebrown: '#8b4513',\n    salmon: '#fa8072',\n    sandybrown: '#f4a460',\n    seagreen: '#2e8b57',\n    seashell: '#fff5ee',\n    sienna: '#a0522d',\n    silver: '#c0c0c0',\n    skyblue: '#87ceeb',\n    slateblue: '#6a5acd',\n    slategray: '#708090',\n    slategrey: '#708090',\n    snow: '#fffafa',\n    springgreen: '#00ff7f',\n    steelblue: '#4682b4',\n    tan: '#d2b48c',\n    teal: '#008080',\n    thistle: '#d8bfd8',\n    tomato: '#ff6347',\n    turquoise: '#40e0d0',\n    violet: '#ee82ee',\n    wheat: '#f5deb3',\n    white: '#ffffff',\n    whitesmoke: '#f5f5f5',\n    yellow: '#ffff00',\n    yellowgreen: '#9acd32'\n  };\n\n  chroma.colors = colors = w3cx11;\n\n  lab2rgb = function() {\n    var a, args, b, g, l, r, x, y, z;\n    args = unpack(arguments);\n    l = args[0], a = args[1], b = args[2];\n    y = (l + 16) / 116;\n    x = isNaN(a) ? y : y + a / 500;\n    z = isNaN(b) ? y : y - b / 200;\n    y = LAB_CONSTANTS.Yn * lab_xyz(y);\n    x = LAB_CONSTANTS.Xn * lab_xyz(x);\n    z = LAB_CONSTANTS.Zn * lab_xyz(z);\n    r = xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z);\n    g = xyz_rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z);\n    b = xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n  };\n\n  xyz_rgb = function(r) {\n    return 255 * (r <= 0.00304 ? 12.92 * r : 1.055 * pow(r, 1 / 2.4) - 0.055);\n  };\n\n  lab_xyz = function(t) {\n    if (t > LAB_CONSTANTS.t1) {\n      return t * t * t;\n    } else {\n      return LAB_CONSTANTS.t2 * (t - LAB_CONSTANTS.t0);\n    }\n  };\n\n  LAB_CONSTANTS = {\n    Kn: 18,\n    Xn: 0.950470,\n    Yn: 1,\n    Zn: 1.088830,\n    t0: 0.137931034,\n    t1: 0.206896552,\n    t2: 0.12841855,\n    t3: 0.008856452\n  };\n\n  rgb2lab = function() {\n    var b, g, r, ref, ref1, x, y, z;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    ref1 = rgb2xyz(r, g, b), x = ref1[0], y = ref1[1], z = ref1[2];\n    return [116 * y - 16, 500 * (x - y), 200 * (y - z)];\n  };\n\n  rgb_xyz = function(r) {\n    if ((r /= 255) <= 0.04045) {\n      return r / 12.92;\n    } else {\n      return pow((r + 0.055) / 1.055, 2.4);\n    }\n  };\n\n  xyz_lab = function(t) {\n    if (t > LAB_CONSTANTS.t3) {\n      return pow(t, 1 / 3);\n    } else {\n      return t / LAB_CONSTANTS.t2 + LAB_CONSTANTS.t0;\n    }\n  };\n\n  rgb2xyz = function() {\n    var b, g, r, ref, x, y, z;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    r = rgb_xyz(r);\n    g = rgb_xyz(g);\n    b = rgb_xyz(b);\n    x = xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / LAB_CONSTANTS.Xn);\n    y = xyz_lab((0.2126729 * r + 0.7151522 * g + 0.0721750 * b) / LAB_CONSTANTS.Yn);\n    z = xyz_lab((0.0193339 * r + 0.1191920 * g + 0.9503041 * b) / LAB_CONSTANTS.Zn);\n    return [x, y, z];\n  };\n\n  chroma.lab = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['lab']), function(){});\n  };\n\n  _input.lab = lab2rgb;\n\n  Color.prototype.lab = function() {\n    return rgb2lab(this._rgb);\n  };\n\n  bezier = function(colors) {\n    var I, I0, I1, c, lab0, lab1, lab2, lab3, ref, ref1, ref2;\n    colors = (function() {\n      var len, o, results;\n      results = [];\n      for (o = 0, len = colors.length; o < len; o++) {\n        c = colors[o];\n        results.push(chroma(c));\n      }\n      return results;\n    })();\n    if (colors.length === 2) {\n      ref = (function() {\n        var len, o, results;\n        results = [];\n        for (o = 0, len = colors.length; o < len; o++) {\n          c = colors[o];\n          results.push(c.lab());\n        }\n        return results;\n      })(), lab0 = ref[0], lab1 = ref[1];\n      I = function(t) {\n        var i, lab;\n        lab = (function() {\n          var o, results;\n          results = [];\n          for (i = o = 0; o <= 2; i = ++o) {\n            results.push(lab0[i] + t * (lab1[i] - lab0[i]));\n          }\n          return results;\n        })();\n        return chroma.lab.apply(chroma, lab);\n      };\n    } else if (colors.length === 3) {\n      ref1 = (function() {\n        var len, o, results;\n        results = [];\n        for (o = 0, len = colors.length; o < len; o++) {\n          c = colors[o];\n          results.push(c.lab());\n        }\n        return results;\n      })(), lab0 = ref1[0], lab1 = ref1[1], lab2 = ref1[2];\n      I = function(t) {\n        var i, lab;\n        lab = (function() {\n          var o, results;\n          results = [];\n          for (i = o = 0; o <= 2; i = ++o) {\n            results.push((1 - t) * (1 - t) * lab0[i] + 2 * (1 - t) * t * lab1[i] + t * t * lab2[i]);\n          }\n          return results;\n        })();\n        return chroma.lab.apply(chroma, lab);\n      };\n    } else if (colors.length === 4) {\n      ref2 = (function() {\n        var len, o, results;\n        results = [];\n        for (o = 0, len = colors.length; o < len; o++) {\n          c = colors[o];\n          results.push(c.lab());\n        }\n        return results;\n      })(), lab0 = ref2[0], lab1 = ref2[1], lab2 = ref2[2], lab3 = ref2[3];\n      I = function(t) {\n        var i, lab;\n        lab = (function() {\n          var o, results;\n          results = [];\n          for (i = o = 0; o <= 2; i = ++o) {\n            results.push((1 - t) * (1 - t) * (1 - t) * lab0[i] + 3 * (1 - t) * (1 - t) * t * lab1[i] + 3 * (1 - t) * t * t * lab2[i] + t * t * t * lab3[i]);\n          }\n          return results;\n        })();\n        return chroma.lab.apply(chroma, lab);\n      };\n    } else if (colors.length === 5) {\n      I0 = bezier(colors.slice(0, 3));\n      I1 = bezier(colors.slice(2, 5));\n      I = function(t) {\n        if (t < 0.5) {\n          return I0(t * 2);\n        } else {\n          return I1((t - 0.5) * 2);\n        }\n      };\n    }\n    return I;\n  };\n\n  chroma.bezier = function(colors) {\n    var f;\n    f = bezier(colors);\n    f.scale = function() {\n      return chroma.scale(f);\n    };\n    return f;\n  };\n\n\n  /*\n      chroma.js\n  \n      Copyright (c) 2011-2013, Gregor Aisch\n      All rights reserved.\n  \n      Redistribution and use in source and binary forms, with or without\n      modification, are permitted provided that the following conditions are met:\n  \n      * Redistributions of source code must retain the above copyright notice, this\n        list of conditions and the following disclaimer.\n  \n      * Redistributions in binary form must reproduce the above copyright notice,\n        this list of conditions and the following disclaimer in the documentation\n        and/or other materials provided with the distribution.\n  \n      * The name Gregor Aisch may not be used to endorse or promote products\n        derived from this software without specific prior written permission.\n  \n      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n      DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n      INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n      BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n      DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n      OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n      NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n      EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  \n      @source: https://github.com/gka/chroma.js\n   */\n\n  chroma.cubehelix = function(start, rotations, hue, gamma, lightness) {\n    var dh, dl, f;\n    if (start == null) {\n      start = 300;\n    }\n    if (rotations == null) {\n      rotations = -1.5;\n    }\n    if (hue == null) {\n      hue = 1;\n    }\n    if (gamma == null) {\n      gamma = 1;\n    }\n    if (lightness == null) {\n      lightness = [0, 1];\n    }\n    dh = 0;\n    if (type(lightness) === 'array') {\n      dl = lightness[1] - lightness[0];\n    } else {\n      dl = 0;\n      lightness = [lightness, lightness];\n    }\n    f = function(fract) {\n      var a, amp, b, cos_a, g, h, l, r, sin_a;\n      a = TWOPI * ((start + 120) / 360 + rotations * fract);\n      l = pow(lightness[0] + dl * fract, gamma);\n      h = dh !== 0 ? hue[0] + fract * dh : hue;\n      amp = h * l * (1 - l) / 2;\n      cos_a = cos(a);\n      sin_a = sin(a);\n      r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);\n      g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);\n      b = l + amp * (+1.97294 * cos_a);\n      return chroma(clip_rgb([r * 255, g * 255, b * 255]));\n    };\n    f.start = function(s) {\n      if (s == null) {\n        return start;\n      }\n      start = s;\n      return f;\n    };\n    f.rotations = function(r) {\n      if (r == null) {\n        return rotations;\n      }\n      rotations = r;\n      return f;\n    };\n    f.gamma = function(g) {\n      if (g == null) {\n        return gamma;\n      }\n      gamma = g;\n      return f;\n    };\n    f.hue = function(h) {\n      if (h == null) {\n        return hue;\n      }\n      hue = h;\n      if (type(hue) === 'array') {\n        dh = hue[1] - hue[0];\n        if (dh === 0) {\n          hue = hue[1];\n        }\n      } else {\n        dh = 0;\n      }\n      return f;\n    };\n    f.lightness = function(h) {\n      if (h == null) {\n        return lightness;\n      }\n      if (type(h) === 'array') {\n        lightness = h;\n        dl = h[1] - h[0];\n      } else {\n        lightness = [h, h];\n        dl = 0;\n      }\n      return f;\n    };\n    f.scale = function() {\n      return chroma.scale(f);\n    };\n    f.hue(hue);\n    return f;\n  };\n\n  chroma.random = function() {\n    var code, digits, i, o;\n    digits = '0123456789abcdef';\n    code = '#';\n    for (i = o = 0; o < 6; i = ++o) {\n      code += digits.charAt(floor(Math.random() * 16));\n    }\n    return new Color(code);\n  };\n\n  _interpolators = [];\n\n  interpolate = function(col1, col2, f, m) {\n    var interpol, len, o, res;\n    if (f == null) {\n      f = 0.5;\n    }\n    if (m == null) {\n      m = 'rgb';\n    }\n\n    /*\n    interpolates between colors\n    f = 0 --> me\n    f = 1 --> col\n     */\n    if (type(col1) !== 'object') {\n      col1 = chroma(col1);\n    }\n    if (type(col2) !== 'object') {\n      col2 = chroma(col2);\n    }\n    for (o = 0, len = _interpolators.length; o < len; o++) {\n      interpol = _interpolators[o];\n      if (m === interpol[0]) {\n        res = interpol[1](col1, col2, f, m);\n        break;\n      }\n    }\n    if (res == null) {\n      throw \"color mode \" + m + \" is not supported\";\n    }\n    return res.alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));\n  };\n\n  chroma.interpolate = interpolate;\n\n  Color.prototype.interpolate = function(col2, f, m) {\n    return interpolate(this, col2, f, m);\n  };\n\n  chroma.mix = interpolate;\n\n  Color.prototype.mix = Color.prototype.interpolate;\n\n  _input.rgb = function() {\n    var k, ref, results, v;\n    ref = unpack(arguments);\n    results = [];\n    for (k in ref) {\n      v = ref[k];\n      results.push(v);\n    }\n    return results;\n  };\n\n  chroma.rgb = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['rgb']), function(){});\n  };\n\n  Color.prototype.rgb = function(round) {\n    if (round == null) {\n      round = true;\n    }\n    if (round) {\n      return this._rgb.map(Math.round).slice(0, 3);\n    } else {\n      return this._rgb.slice(0, 3);\n    }\n  };\n\n  Color.prototype.rgba = function(round) {\n    if (round == null) {\n      round = true;\n    }\n    if (!round) {\n      return this._rgb.slice(0);\n    }\n    return [Math.round(this._rgb[0]), Math.round(this._rgb[1]), Math.round(this._rgb[2]), this._rgb[3]];\n  };\n\n  _guess_formats.push({\n    p: 3,\n    test: function(n) {\n      var a;\n      a = unpack(arguments);\n      if (type(a) === 'array' && a.length === 3) {\n        return 'rgb';\n      }\n      if (a.length === 4 && type(a[3]) === \"number\" && a[3] >= 0 && a[3] <= 1) {\n        return 'rgb';\n      }\n    }\n  });\n\n  _input.lrgb = _input.rgb;\n\n  interpolate_lrgb = function(col1, col2, f, m) {\n    var xyz0, xyz1;\n    xyz0 = col1._rgb;\n    xyz1 = col2._rgb;\n    return new Color(sqrt(pow(xyz0[0], 2) * (1 - f) + pow(xyz1[0], 2) * f), sqrt(pow(xyz0[1], 2) * (1 - f) + pow(xyz1[1], 2) * f), sqrt(pow(xyz0[2], 2) * (1 - f) + pow(xyz1[2], 2) * f), m);\n  };\n\n  _average_lrgb = function(colors) {\n    var col, f, len, o, rgb, xyz;\n    f = 1 / colors.length;\n    xyz = [0, 0, 0, 0];\n    for (o = 0, len = colors.length; o < len; o++) {\n      col = colors[o];\n      rgb = col._rgb;\n      xyz[0] += pow(rgb[0], 2) * f;\n      xyz[1] += pow(rgb[1], 2) * f;\n      xyz[2] += pow(rgb[2], 2) * f;\n      xyz[3] += rgb[3] * f;\n    }\n    xyz[0] = sqrt(xyz[0]);\n    xyz[1] = sqrt(xyz[1]);\n    xyz[2] = sqrt(xyz[2]);\n    return new Color(xyz);\n  };\n\n  _interpolators.push(['lrgb', interpolate_lrgb]);\n\n  chroma.average = function(colors, mode) {\n    var A, alpha, c, cnt, dx, dy, first, i, l, len, o, xyz, xyz2;\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    l = colors.length;\n    colors = colors.map(function(c) {\n      return chroma(c);\n    });\n    first = colors.splice(0, 1)[0];\n    if (mode === 'lrgb') {\n      return _average_lrgb(colors);\n    }\n    xyz = first.get(mode);\n    cnt = [];\n    dx = 0;\n    dy = 0;\n    for (i in xyz) {\n      xyz[i] = xyz[i] || 0;\n      cnt.push(isNaN(xyz[i]) ? 0 : 1);\n      if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {\n        A = xyz[i] / 180 * PI;\n        dx += cos(A);\n        dy += sin(A);\n      }\n    }\n    alpha = first.alpha();\n    for (o = 0, len = colors.length; o < len; o++) {\n      c = colors[o];\n      xyz2 = c.get(mode);\n      alpha += c.alpha();\n      for (i in xyz) {\n        if (!isNaN(xyz2[i])) {\n          cnt[i] += 1;\n          if (mode.charAt(i) === 'h') {\n            A = xyz2[i] / 180 * PI;\n            dx += cos(A);\n            dy += sin(A);\n          } else {\n            xyz[i] += xyz2[i];\n          }\n        }\n      }\n    }\n    for (i in xyz) {\n      if (mode.charAt(i) === 'h') {\n        A = atan2(dy / cnt[i], dx / cnt[i]) / PI * 180;\n        while (A < 0) {\n          A += 360;\n        }\n        while (A >= 360) {\n          A -= 360;\n        }\n        xyz[i] = A;\n      } else {\n        xyz[i] = xyz[i] / cnt[i];\n      }\n    }\n    return chroma(xyz, mode).alpha(alpha / l);\n  };\n\n  hex2rgb = function(hex) {\n    var a, b, g, r, rgb, u;\n    if (hex.match(/^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)) {\n      if (hex.length === 4 || hex.length === 7) {\n        hex = hex.substr(1);\n      }\n      if (hex.length === 3) {\n        hex = hex.split(\"\");\n        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n      }\n      u = parseInt(hex, 16);\n      r = u >> 16;\n      g = u >> 8 & 0xFF;\n      b = u & 0xFF;\n      return [r, g, b, 1];\n    }\n    if (hex.match(/^#?([A-Fa-f0-9]{8})$/)) {\n      if (hex.length === 9) {\n        hex = hex.substr(1);\n      }\n      u = parseInt(hex, 16);\n      r = u >> 24 & 0xFF;\n      g = u >> 16 & 0xFF;\n      b = u >> 8 & 0xFF;\n      a = round((u & 0xFF) / 0xFF * 100) / 100;\n      return [r, g, b, a];\n    }\n    if ((_input.css != null) && (rgb = _input.css(hex))) {\n      return rgb;\n    }\n    throw \"unknown color: \" + hex;\n  };\n\n  rgb2hex = function(channels, mode) {\n    var a, b, g, hxa, r, str, u;\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    r = channels[0], g = channels[1], b = channels[2], a = channels[3];\n    r = Math.round(r);\n    g = Math.round(g);\n    b = Math.round(b);\n    u = r << 16 | g << 8 | b;\n    str = \"000000\" + u.toString(16);\n    str = str.substr(str.length - 6);\n    hxa = '0' + round(a * 255).toString(16);\n    hxa = hxa.substr(hxa.length - 2);\n    return \"#\" + (function() {\n      switch (mode.toLowerCase()) {\n        case 'rgba':\n          return str + hxa;\n        case 'argb':\n          return hxa + str;\n        default:\n          return str;\n      }\n    })();\n  };\n\n  _input.hex = function(h) {\n    return hex2rgb(h);\n  };\n\n  chroma.hex = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['hex']), function(){});\n  };\n\n  Color.prototype.hex = function(mode) {\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    return rgb2hex(this._rgb, mode);\n  };\n\n  _guess_formats.push({\n    p: 4,\n    test: function(n) {\n      if (arguments.length === 1 && type(n) === \"string\") {\n        return 'hex';\n      }\n    }\n  });\n\n  hsl2rgb = function() {\n    var args, b, c, g, h, i, l, o, r, ref, s, t1, t2, t3;\n    args = unpack(arguments);\n    h = args[0], s = args[1], l = args[2];\n    if (s === 0) {\n      r = g = b = l * 255;\n    } else {\n      t3 = [0, 0, 0];\n      c = [0, 0, 0];\n      t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      t1 = 2 * l - t2;\n      h /= 360;\n      t3[0] = h + 1 / 3;\n      t3[1] = h;\n      t3[2] = h - 1 / 3;\n      for (i = o = 0; o <= 2; i = ++o) {\n        if (t3[i] < 0) {\n          t3[i] += 1;\n        }\n        if (t3[i] > 1) {\n          t3[i] -= 1;\n        }\n        if (6 * t3[i] < 1) {\n          c[i] = t1 + (t2 - t1) * 6 * t3[i];\n        } else if (2 * t3[i] < 1) {\n          c[i] = t2;\n        } else if (3 * t3[i] < 2) {\n          c[i] = t1 + (t2 - t1) * ((2 / 3) - t3[i]) * 6;\n        } else {\n          c[i] = t1;\n        }\n      }\n      ref = [round(c[0] * 255), round(c[1] * 255), round(c[2] * 255)], r = ref[0], g = ref[1], b = ref[2];\n    }\n    if (args.length > 3) {\n      return [r, g, b, args[3]];\n    } else {\n      return [r, g, b];\n    }\n  };\n\n  rgb2hsl = function(r, g, b) {\n    var h, l, min, ref, s;\n    if (r !== void 0 && r.length >= 3) {\n      ref = r, r = ref[0], g = ref[1], b = ref[2];\n    }\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    min = Math.min(r, g, b);\n    max = Math.max(r, g, b);\n    l = (max + min) / 2;\n    if (max === min) {\n      s = 0;\n      h = Number.NaN;\n    } else {\n      s = l < 0.5 ? (max - min) / (max + min) : (max - min) / (2 - max - min);\n    }\n    if (r === max) {\n      h = (g - b) / (max - min);\n    } else if (g === max) {\n      h = 2 + (b - r) / (max - min);\n    } else if (b === max) {\n      h = 4 + (r - g) / (max - min);\n    }\n    h *= 60;\n    if (h < 0) {\n      h += 360;\n    }\n    return [h, s, l];\n  };\n\n  chroma.hsl = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['hsl']), function(){});\n  };\n\n  _input.hsl = hsl2rgb;\n\n  Color.prototype.hsl = function() {\n    return rgb2hsl(this._rgb);\n  };\n\n  hsv2rgb = function() {\n    var args, b, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, s, t, v;\n    args = unpack(arguments);\n    h = args[0], s = args[1], v = args[2];\n    v *= 255;\n    if (s === 0) {\n      r = g = b = v;\n    } else {\n      if (h === 360) {\n        h = 0;\n      }\n      if (h > 360) {\n        h -= 360;\n      }\n      if (h < 0) {\n        h += 360;\n      }\n      h /= 60;\n      i = floor(h);\n      f = h - i;\n      p = v * (1 - s);\n      q = v * (1 - s * f);\n      t = v * (1 - s * (1 - f));\n      switch (i) {\n        case 0:\n          ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];\n          break;\n        case 1:\n          ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];\n          break;\n        case 2:\n          ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];\n          break;\n        case 3:\n          ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];\n          break;\n        case 4:\n          ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];\n          break;\n        case 5:\n          ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];\n      }\n    }\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n  };\n\n  rgb2hsv = function() {\n    var b, delta, g, h, min, r, ref, s, v;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    min = Math.min(r, g, b);\n    max = Math.max(r, g, b);\n    delta = max - min;\n    v = max / 255.0;\n    if (max === 0) {\n      h = Number.NaN;\n      s = 0;\n    } else {\n      s = delta / max;\n      if (r === max) {\n        h = (g - b) / delta;\n      }\n      if (g === max) {\n        h = 2 + (b - r) / delta;\n      }\n      if (b === max) {\n        h = 4 + (r - g) / delta;\n      }\n      h *= 60;\n      if (h < 0) {\n        h += 360;\n      }\n    }\n    return [h, s, v];\n  };\n\n  chroma.hsv = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['hsv']), function(){});\n  };\n\n  _input.hsv = hsv2rgb;\n\n  Color.prototype.hsv = function() {\n    return rgb2hsv(this._rgb);\n  };\n\n  num2rgb = function(num) {\n    var b, g, r;\n    if (type(num) === \"number\" && num >= 0 && num <= 0xFFFFFF) {\n      r = num >> 16;\n      g = (num >> 8) & 0xFF;\n      b = num & 0xFF;\n      return [r, g, b, 1];\n    }\n    console.warn(\"unknown num color: \" + num);\n    return [0, 0, 0, 1];\n  };\n\n  rgb2num = function() {\n    var b, g, r, ref;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    return (r << 16) + (g << 8) + b;\n  };\n\n  chroma.num = function(num) {\n    return new Color(num, 'num');\n  };\n\n  Color.prototype.num = function(mode) {\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    return rgb2num(this._rgb, mode);\n  };\n\n  _input.num = num2rgb;\n\n  _guess_formats.push({\n    p: 1,\n    test: function(n) {\n      if (arguments.length === 1 && type(n) === \"number\" && n >= 0 && n <= 0xFFFFFF) {\n        return 'num';\n      }\n    }\n  });\n\n  hcg2rgb = function() {\n    var _c, _g, args, b, c, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, t, v;\n    args = unpack(arguments);\n    h = args[0], c = args[1], _g = args[2];\n    c = c / 100;\n    g = g / 100 * 255;\n    _c = c * 255;\n    if (c === 0) {\n      r = g = b = _g;\n    } else {\n      if (h === 360) {\n        h = 0;\n      }\n      if (h > 360) {\n        h -= 360;\n      }\n      if (h < 0) {\n        h += 360;\n      }\n      h /= 60;\n      i = floor(h);\n      f = h - i;\n      p = _g * (1 - c);\n      q = p + _c * (1 - f);\n      t = p + _c * f;\n      v = p + _c;\n      switch (i) {\n        case 0:\n          ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];\n          break;\n        case 1:\n          ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];\n          break;\n        case 2:\n          ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];\n          break;\n        case 3:\n          ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];\n          break;\n        case 4:\n          ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];\n          break;\n        case 5:\n          ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];\n      }\n    }\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n  };\n\n  rgb2hcg = function() {\n    var _g, b, c, delta, g, h, min, r, ref;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    min = Math.min(r, g, b);\n    max = Math.max(r, g, b);\n    delta = max - min;\n    c = delta * 100 / 255;\n    _g = min / (255 - delta) * 100;\n    if (delta === 0) {\n      h = Number.NaN;\n    } else {\n      if (r === max) {\n        h = (g - b) / delta;\n      }\n      if (g === max) {\n        h = 2 + (b - r) / delta;\n      }\n      if (b === max) {\n        h = 4 + (r - g) / delta;\n      }\n      h *= 60;\n      if (h < 0) {\n        h += 360;\n      }\n    }\n    return [h, c, _g];\n  };\n\n  chroma.hcg = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['hcg']), function(){});\n  };\n\n  _input.hcg = hcg2rgb;\n\n  Color.prototype.hcg = function() {\n    return rgb2hcg(this._rgb);\n  };\n\n  css2rgb = function(css) {\n    var aa, ab, hsl, i, m, o, rgb, w;\n    css = css.toLowerCase();\n    if ((chroma.colors != null) && chroma.colors[css]) {\n      return hex2rgb(chroma.colors[css]);\n    }\n    if (m = css.match(/rgb\\(\\s*(\\-?\\d+),\\s*(\\-?\\d+)\\s*,\\s*(\\-?\\d+)\\s*\\)/)) {\n      rgb = m.slice(1, 4);\n      for (i = o = 0; o <= 2; i = ++o) {\n        rgb[i] = +rgb[i];\n      }\n      rgb[3] = 1;\n    } else if (m = css.match(/rgba\\(\\s*(\\-?\\d+),\\s*(\\-?\\d+)\\s*,\\s*(\\-?\\d+)\\s*,\\s*([01]|[01]?\\.\\d+)\\)/)) {\n      rgb = m.slice(1, 5);\n      for (i = w = 0; w <= 3; i = ++w) {\n        rgb[i] = +rgb[i];\n      }\n    } else if (m = css.match(/rgb\\(\\s*(\\-?\\d+(?:\\.\\d+)?)%,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*\\)/)) {\n      rgb = m.slice(1, 4);\n      for (i = aa = 0; aa <= 2; i = ++aa) {\n        rgb[i] = round(rgb[i] * 2.55);\n      }\n      rgb[3] = 1;\n    } else if (m = css.match(/rgba\\(\\s*(\\-?\\d+(?:\\.\\d+)?)%,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)/)) {\n      rgb = m.slice(1, 5);\n      for (i = ab = 0; ab <= 2; i = ++ab) {\n        rgb[i] = round(rgb[i] * 2.55);\n      }\n      rgb[3] = +rgb[3];\n    } else if (m = css.match(/hsl\\(\\s*(\\-?\\d+(?:\\.\\d+)?),\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*\\)/)) {\n      hsl = m.slice(1, 4);\n      hsl[1] *= 0.01;\n      hsl[2] *= 0.01;\n      rgb = hsl2rgb(hsl);\n      rgb[3] = 1;\n    } else if (m = css.match(/hsla\\(\\s*(\\-?\\d+(?:\\.\\d+)?),\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*(\\-?\\d+(?:\\.\\d+)?)%\\s*,\\s*([01]|[01]?\\.\\d+)\\)/)) {\n      hsl = m.slice(1, 4);\n      hsl[1] *= 0.01;\n      hsl[2] *= 0.01;\n      rgb = hsl2rgb(hsl);\n      rgb[3] = +m[4];\n    }\n    return rgb;\n  };\n\n  rgb2css = function(rgba) {\n    var mode;\n    mode = rgba[3] < 1 ? 'rgba' : 'rgb';\n    if (mode === 'rgb') {\n      return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ')';\n    } else if (mode === 'rgba') {\n      return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ',' + rgba[3] + ')';\n    } else {\n\n    }\n  };\n\n  rnd = function(a) {\n    return round(a * 100) / 100;\n  };\n\n  hsl2css = function(hsl, alpha) {\n    var mode;\n    mode = alpha < 1 ? 'hsla' : 'hsl';\n    hsl[0] = rnd(hsl[0] || 0);\n    hsl[1] = rnd(hsl[1] * 100) + '%';\n    hsl[2] = rnd(hsl[2] * 100) + '%';\n    if (mode === 'hsla') {\n      hsl[3] = alpha;\n    }\n    return mode + '(' + hsl.join(',') + ')';\n  };\n\n  _input.css = function(h) {\n    return css2rgb(h);\n  };\n\n  chroma.css = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['css']), function(){});\n  };\n\n  Color.prototype.css = function(mode) {\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    if (mode.slice(0, 3) === 'rgb') {\n      return rgb2css(this._rgb);\n    } else if (mode.slice(0, 3) === 'hsl') {\n      return hsl2css(this.hsl(), this.alpha());\n    }\n  };\n\n  _input.named = function(name) {\n    return hex2rgb(w3cx11[name]);\n  };\n\n  _guess_formats.push({\n    p: 5,\n    test: function(n) {\n      if (arguments.length === 1 && (w3cx11[n] != null)) {\n        return 'named';\n      }\n    }\n  });\n\n  Color.prototype.name = function(n) {\n    var h, k;\n    if (arguments.length) {\n      if (w3cx11[n]) {\n        this._rgb = hex2rgb(w3cx11[n]);\n      }\n      this._rgb[3] = 1;\n      this;\n    }\n    h = this.hex();\n    for (k in w3cx11) {\n      if (h === w3cx11[k]) {\n        return k;\n      }\n    }\n    return h;\n  };\n\n  lch2lab = function() {\n\n    /*\n    Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.\n    These formulas were invented by David Dalrymple to obtain maximum contrast without going\n    out of gamut if the parameters are in the range 0-1.\n    \n    A saturation multiplier was added by Gregor Aisch\n     */\n    var c, h, l, ref;\n    ref = unpack(arguments), l = ref[0], c = ref[1], h = ref[2];\n    h = h * DEG2RAD;\n    return [l, cos(h) * c, sin(h) * c];\n  };\n\n  lch2rgb = function() {\n    var L, a, args, b, c, g, h, l, r, ref, ref1;\n    args = unpack(arguments);\n    l = args[0], c = args[1], h = args[2];\n    ref = lch2lab(l, c, h), L = ref[0], a = ref[1], b = ref[2];\n    ref1 = lab2rgb(L, a, b), r = ref1[0], g = ref1[1], b = ref1[2];\n    return [r, g, b, args.length > 3 ? args[3] : 1];\n  };\n\n  lab2lch = function() {\n    var a, b, c, h, l, ref;\n    ref = unpack(arguments), l = ref[0], a = ref[1], b = ref[2];\n    c = sqrt(a * a + b * b);\n    h = (atan2(b, a) * RAD2DEG + 360) % 360;\n    if (round(c * 10000) === 0) {\n      h = Number.NaN;\n    }\n    return [l, c, h];\n  };\n\n  rgb2lch = function() {\n    var a, b, g, l, r, ref, ref1;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    ref1 = rgb2lab(r, g, b), l = ref1[0], a = ref1[1], b = ref1[2];\n    return lab2lch(l, a, b);\n  };\n\n  chroma.lch = function() {\n    var args;\n    args = unpack(arguments);\n    return new Color(args, 'lch');\n  };\n\n  chroma.hcl = function() {\n    var args;\n    args = unpack(arguments);\n    return new Color(args, 'hcl');\n  };\n\n  _input.lch = lch2rgb;\n\n  _input.hcl = function() {\n    var c, h, l, ref;\n    ref = unpack(arguments), h = ref[0], c = ref[1], l = ref[2];\n    return lch2rgb([l, c, h]);\n  };\n\n  Color.prototype.lch = function() {\n    return rgb2lch(this._rgb);\n  };\n\n  Color.prototype.hcl = function() {\n    return rgb2lch(this._rgb).reverse();\n  };\n\n  rgb2cmyk = function(mode) {\n    var b, c, f, g, k, m, r, ref, y;\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    r = r / 255;\n    g = g / 255;\n    b = b / 255;\n    k = 1 - Math.max(r, Math.max(g, b));\n    f = k < 1 ? 1 / (1 - k) : 0;\n    c = (1 - r - k) * f;\n    m = (1 - g - k) * f;\n    y = (1 - b - k) * f;\n    return [c, m, y, k];\n  };\n\n  cmyk2rgb = function() {\n    var alpha, args, b, c, g, k, m, r, y;\n    args = unpack(arguments);\n    c = args[0], m = args[1], y = args[2], k = args[3];\n    alpha = args.length > 4 ? args[4] : 1;\n    if (k === 1) {\n      return [0, 0, 0, alpha];\n    }\n    r = c >= 1 ? 0 : 255 * (1 - c) * (1 - k);\n    g = m >= 1 ? 0 : 255 * (1 - m) * (1 - k);\n    b = y >= 1 ? 0 : 255 * (1 - y) * (1 - k);\n    return [r, g, b, alpha];\n  };\n\n  _input.cmyk = function() {\n    return cmyk2rgb(unpack(arguments));\n  };\n\n  chroma.cmyk = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['cmyk']), function(){});\n  };\n\n  Color.prototype.cmyk = function() {\n    return rgb2cmyk(this._rgb);\n  };\n\n  _input.gl = function() {\n    var i, k, o, rgb, v;\n    rgb = (function() {\n      var ref, results;\n      ref = unpack(arguments);\n      results = [];\n      for (k in ref) {\n        v = ref[k];\n        results.push(v);\n      }\n      return results;\n    }).apply(this, arguments);\n    for (i = o = 0; o <= 2; i = ++o) {\n      rgb[i] *= 255;\n    }\n    return rgb;\n  };\n\n  chroma.gl = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['gl']), function(){});\n  };\n\n  Color.prototype.gl = function() {\n    var rgb;\n    rgb = this._rgb;\n    return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255, rgb[3]];\n  };\n\n  rgb2luminance = function(r, g, b) {\n    var ref;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    r = luminance_x(r);\n    g = luminance_x(g);\n    b = luminance_x(b);\n    return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n  };\n\n  luminance_x = function(x) {\n    x /= 255;\n    if (x <= 0.03928) {\n      return x / 12.92;\n    } else {\n      return pow((x + 0.055) / 1.055, 2.4);\n    }\n  };\n\n  interpolate_rgb = function(col1, col2, f, m) {\n    var xyz0, xyz1;\n    xyz0 = col1._rgb;\n    xyz1 = col2._rgb;\n    return new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);\n  };\n\n  _interpolators.push(['rgb', interpolate_rgb]);\n\n  Color.prototype.luminance = function(lum, mode) {\n    var cur_lum, eps, max_iter, rgba, test;\n    if (mode == null) {\n      mode = 'rgb';\n    }\n    if (!arguments.length) {\n      return rgb2luminance(this._rgb);\n    }\n    rgba = this._rgb;\n    if (lum === 0) {\n      rgba = [0, 0, 0, this._rgb[3]];\n    } else if (lum === 1) {\n      rgba = [255, 255, 255, this[3]];\n    } else {\n      cur_lum = rgb2luminance(this._rgb);\n      eps = 1e-7;\n      max_iter = 20;\n      test = function(l, h) {\n        var lm, m;\n        m = l.interpolate(h, 0.5, mode);\n        lm = m.luminance();\n        if (Math.abs(lum - lm) < eps || !max_iter--) {\n          return m;\n        }\n        if (lm > lum) {\n          return test(l, m);\n        }\n        return test(m, h);\n      };\n      if (cur_lum > lum) {\n        rgba = test(chroma('black'), this).rgba();\n      } else {\n        rgba = test(this, chroma('white')).rgba();\n      }\n    }\n    return chroma(rgba).alpha(this.alpha());\n  };\n\n  temperature2rgb = function(kelvin) {\n    var b, g, r, temp;\n    temp = kelvin / 100;\n    if (temp < 66) {\n      r = 255;\n      g = -155.25485562709179 - 0.44596950469579133 * (g = temp - 2) + 104.49216199393888 * log(g);\n      b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp - 10) + 115.67994401066147 * log(b);\n    } else {\n      r = 351.97690566805693 + 0.114206453784165 * (r = temp - 55) - 40.25366309332127 * log(r);\n      g = 325.4494125711974 + 0.07943456536662342 * (g = temp - 50) - 28.0852963507957 * log(g);\n      b = 255;\n    }\n    return [r, g, b];\n  };\n\n  rgb2temperature = function() {\n    var b, eps, g, maxTemp, minTemp, r, ref, rgb, temp;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    minTemp = 1000;\n    maxTemp = 40000;\n    eps = 0.4;\n    while (maxTemp - minTemp > eps) {\n      temp = (maxTemp + minTemp) * 0.5;\n      rgb = temperature2rgb(temp);\n      if ((rgb[2] / rgb[0]) >= (b / r)) {\n        maxTemp = temp;\n      } else {\n        minTemp = temp;\n      }\n    }\n    return round(temp);\n  };\n\n  chroma.temperature = chroma.kelvin = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['temperature']), function(){});\n  };\n\n  _input.temperature = _input.kelvin = _input.K = temperature2rgb;\n\n  Color.prototype.temperature = function() {\n    return rgb2temperature(this._rgb);\n  };\n\n  Color.prototype.kelvin = Color.prototype.temperature;\n\n  chroma.contrast = function(a, b) {\n    var l1, l2, ref, ref1;\n    if ((ref = type(a)) === 'string' || ref === 'number') {\n      a = new Color(a);\n    }\n    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {\n      b = new Color(b);\n    }\n    l1 = a.luminance();\n    l2 = b.luminance();\n    if (l1 > l2) {\n      return (l1 + 0.05) / (l2 + 0.05);\n    } else {\n      return (l2 + 0.05) / (l1 + 0.05);\n    }\n  };\n\n  chroma.distance = function(a, b, mode) {\n    var d, i, l1, l2, ref, ref1, sum_sq;\n    if (mode == null) {\n      mode = 'lab';\n    }\n    if ((ref = type(a)) === 'string' || ref === 'number') {\n      a = new Color(a);\n    }\n    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {\n      b = new Color(b);\n    }\n    l1 = a.get(mode);\n    l2 = b.get(mode);\n    sum_sq = 0;\n    for (i in l1) {\n      d = (l1[i] || 0) - (l2[i] || 0);\n      sum_sq += d * d;\n    }\n    return Math.sqrt(sum_sq);\n  };\n\n  chroma.deltaE = function(a, b, L, C) {\n    var L1, L2, a1, a2, b1, b2, c1, c2, c4, dH2, delA, delB, delC, delL, f, h1, ref, ref1, ref2, ref3, sc, sh, sl, t, v1, v2, v3;\n    if (L == null) {\n      L = 1;\n    }\n    if (C == null) {\n      C = 1;\n    }\n    if ((ref = type(a)) === 'string' || ref === 'number') {\n      a = new Color(a);\n    }\n    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {\n      b = new Color(b);\n    }\n    ref2 = a.lab(), L1 = ref2[0], a1 = ref2[1], b1 = ref2[2];\n    ref3 = b.lab(), L2 = ref3[0], a2 = ref3[1], b2 = ref3[2];\n    c1 = sqrt(a1 * a1 + b1 * b1);\n    c2 = sqrt(a2 * a2 + b2 * b2);\n    sl = L1 < 16.0 ? 0.511 : (0.040975 * L1) / (1.0 + 0.01765 * L1);\n    sc = (0.0638 * c1) / (1.0 + 0.0131 * c1) + 0.638;\n    h1 = c1 < 0.000001 ? 0.0 : (atan2(b1, a1) * 180.0) / PI;\n    while (h1 < 0) {\n      h1 += 360;\n    }\n    while (h1 >= 360) {\n      h1 -= 360;\n    }\n    t = (h1 >= 164.0) && (h1 <= 345.0) ? 0.56 + abs(0.2 * cos((PI * (h1 + 168.0)) / 180.0)) : 0.36 + abs(0.4 * cos((PI * (h1 + 35.0)) / 180.0));\n    c4 = c1 * c1 * c1 * c1;\n    f = sqrt(c4 / (c4 + 1900.0));\n    sh = sc * (f * t + 1.0 - f);\n    delL = L1 - L2;\n    delC = c1 - c2;\n    delA = a1 - a2;\n    delB = b1 - b2;\n    dH2 = delA * delA + delB * delB - delC * delC;\n    v1 = delL / (L * sl);\n    v2 = delC / (C * sc);\n    v3 = sh;\n    return sqrt(v1 * v1 + v2 * v2 + (dH2 / (v3 * v3)));\n  };\n\n  Color.prototype.get = function(modechan) {\n    var channel, i, me, mode, ref, src;\n    me = this;\n    ref = modechan.split('.'), mode = ref[0], channel = ref[1];\n    src = me[mode]();\n    if (channel) {\n      i = mode.indexOf(channel);\n      if (i > -1) {\n        return src[i];\n      } else {\n        return console.warn('unknown channel ' + channel + ' in mode ' + mode);\n      }\n    } else {\n      return src;\n    }\n  };\n\n  Color.prototype.set = function(modechan, value) {\n    var channel, i, me, mode, ref, src;\n    me = this;\n    ref = modechan.split('.'), mode = ref[0], channel = ref[1];\n    if (channel) {\n      src = me[mode]();\n      i = mode.indexOf(channel);\n      if (i > -1) {\n        if (type(value) === 'string') {\n          switch (value.charAt(0)) {\n            case '+':\n              src[i] += +value;\n              break;\n            case '-':\n              src[i] += +value;\n              break;\n            case '*':\n              src[i] *= +(value.substr(1));\n              break;\n            case '/':\n              src[i] /= +(value.substr(1));\n              break;\n            default:\n              src[i] = +value;\n          }\n        } else {\n          src[i] = value;\n        }\n      } else {\n        console.warn('unknown channel ' + channel + ' in mode ' + mode);\n      }\n    } else {\n      src = value;\n    }\n    return chroma(src, mode).alpha(me.alpha());\n  };\n\n  Color.prototype.clipped = function() {\n    return this._rgb._clipped || false;\n  };\n\n  Color.prototype.alpha = function(a) {\n    if (arguments.length) {\n      return chroma.rgb([this._rgb[0], this._rgb[1], this._rgb[2], a]);\n    }\n    return this._rgb[3];\n  };\n\n  Color.prototype.darken = function(amount) {\n    var lab, me;\n    if (amount == null) {\n      amount = 1;\n    }\n    me = this;\n    lab = me.lab();\n    lab[0] -= LAB_CONSTANTS.Kn * amount;\n    return chroma.lab(lab).alpha(me.alpha());\n  };\n\n  Color.prototype.brighten = function(amount) {\n    if (amount == null) {\n      amount = 1;\n    }\n    return this.darken(-amount);\n  };\n\n  Color.prototype.darker = Color.prototype.darken;\n\n  Color.prototype.brighter = Color.prototype.brighten;\n\n  Color.prototype.saturate = function(amount) {\n    var lch, me;\n    if (amount == null) {\n      amount = 1;\n    }\n    me = this;\n    lch = me.lch();\n    lch[1] += amount * LAB_CONSTANTS.Kn;\n    if (lch[1] < 0) {\n      lch[1] = 0;\n    }\n    return chroma.lch(lch).alpha(me.alpha());\n  };\n\n  Color.prototype.desaturate = function(amount) {\n    if (amount == null) {\n      amount = 1;\n    }\n    return this.saturate(-amount);\n  };\n\n  Color.prototype.premultiply = function() {\n    var a, rgb;\n    rgb = this.rgb();\n    a = this.alpha();\n    return chroma(rgb[0] * a, rgb[1] * a, rgb[2] * a, a);\n  };\n\n  blend = function(bottom, top, mode) {\n    if (!blend[mode]) {\n      throw 'unknown blend mode ' + mode;\n    }\n    return blend[mode](bottom, top);\n  };\n\n  blend_f = function(f) {\n    return function(bottom, top) {\n      var c0, c1;\n      c0 = chroma(top).rgb();\n      c1 = chroma(bottom).rgb();\n      return chroma(f(c0, c1), 'rgb');\n    };\n  };\n\n  each = function(f) {\n    return function(c0, c1) {\n      var i, o, out;\n      out = [];\n      for (i = o = 0; o <= 3; i = ++o) {\n        out[i] = f(c0[i], c1[i]);\n      }\n      return out;\n    };\n  };\n\n  normal = function(a, b) {\n    return a;\n  };\n\n  multiply = function(a, b) {\n    return a * b / 255;\n  };\n\n  darken = function(a, b) {\n    if (a > b) {\n      return b;\n    } else {\n      return a;\n    }\n  };\n\n  lighten = function(a, b) {\n    if (a > b) {\n      return a;\n    } else {\n      return b;\n    }\n  };\n\n  screen = function(a, b) {\n    return 255 * (1 - (1 - a / 255) * (1 - b / 255));\n  };\n\n  overlay = function(a, b) {\n    if (b < 128) {\n      return 2 * a * b / 255;\n    } else {\n      return 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255));\n    }\n  };\n\n  burn = function(a, b) {\n    return 255 * (1 - (1 - b / 255) / (a / 255));\n  };\n\n  dodge = function(a, b) {\n    if (a === 255) {\n      return 255;\n    }\n    a = 255 * (b / 255) / (1 - a / 255);\n    if (a > 255) {\n      return 255;\n    } else {\n      return a;\n    }\n  };\n\n  blend.normal = blend_f(each(normal));\n\n  blend.multiply = blend_f(each(multiply));\n\n  blend.screen = blend_f(each(screen));\n\n  blend.overlay = blend_f(each(overlay));\n\n  blend.darken = blend_f(each(darken));\n\n  blend.lighten = blend_f(each(lighten));\n\n  blend.dodge = blend_f(each(dodge));\n\n  blend.burn = blend_f(each(burn));\n\n  chroma.blend = blend;\n\n  chroma.analyze = function(data) {\n    var len, o, r, val;\n    r = {\n      min: Number.MAX_VALUE,\n      max: Number.MAX_VALUE * -1,\n      sum: 0,\n      values: [],\n      count: 0\n    };\n    for (o = 0, len = data.length; o < len; o++) {\n      val = data[o];\n      if ((val != null) && !isNaN(val)) {\n        r.values.push(val);\n        r.sum += val;\n        if (val < r.min) {\n          r.min = val;\n        }\n        if (val > r.max) {\n          r.max = val;\n        }\n        r.count += 1;\n      }\n    }\n    r.domain = [r.min, r.max];\n    r.limits = function(mode, num) {\n      return chroma.limits(r, mode, num);\n    };\n    return r;\n  };\n\n  chroma.scale = function(colors, positions) {\n    var _classes, _colorCache, _colors, _correctLightness, _domain, _fixed, _gamma, _max, _min, _mode, _nacol, _out, _padding, _pos, _spread, _useCache, classifyValue, f, getClass, getColor, resetCache, setColors, tmap;\n    _mode = 'rgb';\n    _nacol = chroma('#ccc');\n    _spread = 0;\n    _fixed = false;\n    _domain = [0, 1];\n    _pos = [];\n    _padding = [0, 0];\n    _classes = false;\n    _colors = [];\n    _out = false;\n    _min = 0;\n    _max = 1;\n    _correctLightness = false;\n    _colorCache = {};\n    _useCache = true;\n    _gamma = 1;\n    setColors = function(colors) {\n      var c, col, o, ref, ref1, w;\n      if (colors == null) {\n        colors = ['#fff', '#000'];\n      }\n      if ((colors != null) && type(colors) === 'string' && (chroma.brewer != null)) {\n        colors = chroma.brewer[colors] || chroma.brewer[colors.toLowerCase()] || colors;\n      }\n      if (type(colors) === 'array') {\n        colors = colors.slice(0);\n        for (c = o = 0, ref = colors.length - 1; 0 <= ref ? o <= ref : o >= ref; c = 0 <= ref ? ++o : --o) {\n          col = colors[c];\n          if (type(col) === \"string\") {\n            colors[c] = chroma(col);\n          }\n        }\n        _pos.length = 0;\n        for (c = w = 0, ref1 = colors.length - 1; 0 <= ref1 ? w <= ref1 : w >= ref1; c = 0 <= ref1 ? ++w : --w) {\n          _pos.push(c / (colors.length - 1));\n        }\n      }\n      resetCache();\n      return _colors = colors;\n    };\n    getClass = function(value) {\n      var i, n;\n      if (_classes != null) {\n        n = _classes.length - 1;\n        i = 0;\n        while (i < n && value >= _classes[i]) {\n          i++;\n        }\n        return i - 1;\n      }\n      return 0;\n    };\n    tmap = function(t) {\n      return t;\n    };\n    classifyValue = function(value) {\n      var i, maxc, minc, n, val;\n      val = value;\n      if (_classes.length > 2) {\n        n = _classes.length - 1;\n        i = getClass(value);\n        minc = _classes[0] + (_classes[1] - _classes[0]) * (0 + _spread * 0.5);\n        maxc = _classes[n - 1] + (_classes[n] - _classes[n - 1]) * (1 - _spread * 0.5);\n        val = _min + ((_classes[i] + (_classes[i + 1] - _classes[i]) * 0.5 - minc) / (maxc - minc)) * (_max - _min);\n      }\n      return val;\n    };\n    getColor = function(val, bypassMap) {\n      var c, col, i, k, o, p, ref, t;\n      if (bypassMap == null) {\n        bypassMap = false;\n      }\n      if (isNaN(val)) {\n        return _nacol;\n      }\n      if (!bypassMap) {\n        if (_classes && _classes.length > 2) {\n          c = getClass(val);\n          t = c / (_classes.length - 2);\n        } else if (_max !== _min) {\n          t = (val - _min) / (_max - _min);\n        } else {\n          t = 1;\n        }\n      } else {\n        t = val;\n      }\n      if (!bypassMap) {\n        t = tmap(t);\n      }\n      if (_gamma !== 1) {\n        t = pow(t, _gamma);\n      }\n      t = _padding[0] + (t * (1 - _padding[0] - _padding[1]));\n      t = Math.min(1, Math.max(0, t));\n      k = Math.floor(t * 10000);\n      if (_useCache && _colorCache[k]) {\n        col = _colorCache[k];\n      } else {\n        if (type(_colors) === 'array') {\n          for (i = o = 0, ref = _pos.length - 1; 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {\n            p = _pos[i];\n            if (t <= p) {\n              col = _colors[i];\n              break;\n            }\n            if (t >= p && i === _pos.length - 1) {\n              col = _colors[i];\n              break;\n            }\n            if (t > p && t < _pos[i + 1]) {\n              t = (t - p) / (_pos[i + 1] - p);\n              col = chroma.interpolate(_colors[i], _colors[i + 1], t, _mode);\n              break;\n            }\n          }\n        } else if (type(_colors) === 'function') {\n          col = _colors(t);\n        }\n        if (_useCache) {\n          _colorCache[k] = col;\n        }\n      }\n      return col;\n    };\n    resetCache = function() {\n      return _colorCache = {};\n    };\n    setColors(colors);\n    f = function(v) {\n      var c;\n      c = chroma(getColor(v));\n      if (_out && c[_out]) {\n        return c[_out]();\n      } else {\n        return c;\n      }\n    };\n    f.classes = function(classes) {\n      var d;\n      if (classes != null) {\n        if (type(classes) === 'array') {\n          _classes = classes;\n          _domain = [classes[0], classes[classes.length - 1]];\n        } else {\n          d = chroma.analyze(_domain);\n          if (classes === 0) {\n            _classes = [d.min, d.max];\n          } else {\n            _classes = chroma.limits(d, 'e', classes);\n          }\n        }\n        return f;\n      }\n      return _classes;\n    };\n    f.domain = function(domain) {\n      var c, d, k, len, o, ref, w;\n      if (!arguments.length) {\n        return _domain;\n      }\n      _min = domain[0];\n      _max = domain[domain.length - 1];\n      _pos = [];\n      k = _colors.length;\n      if (domain.length === k && _min !== _max) {\n        for (o = 0, len = domain.length; o < len; o++) {\n          d = domain[o];\n          _pos.push((d - _min) / (_max - _min));\n        }\n      } else {\n        for (c = w = 0, ref = k - 1; 0 <= ref ? w <= ref : w >= ref; c = 0 <= ref ? ++w : --w) {\n          _pos.push(c / (k - 1));\n        }\n      }\n      _domain = [_min, _max];\n      return f;\n    };\n    f.mode = function(_m) {\n      if (!arguments.length) {\n        return _mode;\n      }\n      _mode = _m;\n      resetCache();\n      return f;\n    };\n    f.range = function(colors, _pos) {\n      setColors(colors, _pos);\n      return f;\n    };\n    f.out = function(_o) {\n      _out = _o;\n      return f;\n    };\n    f.spread = function(val) {\n      if (!arguments.length) {\n        return _spread;\n      }\n      _spread = val;\n      return f;\n    };\n    f.correctLightness = function(v) {\n      if (v == null) {\n        v = true;\n      }\n      _correctLightness = v;\n      resetCache();\n      if (_correctLightness) {\n        tmap = function(t) {\n          var L0, L1, L_actual, L_diff, L_ideal, max_iter, pol, t0, t1;\n          L0 = getColor(0, true).lab()[0];\n          L1 = getColor(1, true).lab()[0];\n          pol = L0 > L1;\n          L_actual = getColor(t, true).lab()[0];\n          L_ideal = L0 + (L1 - L0) * t;\n          L_diff = L_actual - L_ideal;\n          t0 = 0;\n          t1 = 1;\n          max_iter = 20;\n          while (Math.abs(L_diff) > 1e-2 && max_iter-- > 0) {\n            (function() {\n              if (pol) {\n                L_diff *= -1;\n              }\n              if (L_diff < 0) {\n                t0 = t;\n                t += (t1 - t) * 0.5;\n              } else {\n                t1 = t;\n                t += (t0 - t) * 0.5;\n              }\n              L_actual = getColor(t, true).lab()[0];\n              return L_diff = L_actual - L_ideal;\n            })();\n          }\n          return t;\n        };\n      } else {\n        tmap = function(t) {\n          return t;\n        };\n      }\n      return f;\n    };\n    f.padding = function(p) {\n      if (p != null) {\n        if (type(p) === 'number') {\n          p = [p, p];\n        }\n        _padding = p;\n        return f;\n      } else {\n        return _padding;\n      }\n    };\n    f.colors = function(numColors, out) {\n      var dd, dm, i, o, ref, result, results, samples, w;\n      if (arguments.length < 2) {\n        out = 'hex';\n      }\n      result = [];\n      if (arguments.length === 0) {\n        result = _colors.slice(0);\n      } else if (numColors === 1) {\n        result = [f(0.5)];\n      } else if (numColors > 1) {\n        dm = _domain[0];\n        dd = _domain[1] - dm;\n        result = (function() {\n          results = [];\n          for (var o = 0; 0 <= numColors ? o < numColors : o > numColors; 0 <= numColors ? o++ : o--){ results.push(o); }\n          return results;\n        }).apply(this).map(function(i) {\n          return f(dm + i / (numColors - 1) * dd);\n        });\n      } else {\n        colors = [];\n        samples = [];\n        if (_classes && _classes.length > 2) {\n          for (i = w = 1, ref = _classes.length; 1 <= ref ? w < ref : w > ref; i = 1 <= ref ? ++w : --w) {\n            samples.push((_classes[i - 1] + _classes[i]) * 0.5);\n          }\n        } else {\n          samples = _domain;\n        }\n        result = samples.map(function(v) {\n          return f(v);\n        });\n      }\n      if (chroma[out]) {\n        result = result.map(function(c) {\n          return c[out]();\n        });\n      }\n      return result;\n    };\n    f.cache = function(c) {\n      if (c != null) {\n        _useCache = c;\n        return f;\n      } else {\n        return _useCache;\n      }\n    };\n    f.gamma = function(g) {\n      if (g != null) {\n        _gamma = g;\n        return f;\n      } else {\n        return _gamma;\n      }\n    };\n    return f;\n  };\n\n  if (chroma.scales == null) {\n    chroma.scales = {};\n  }\n\n  chroma.scales.cool = function() {\n    return chroma.scale([chroma.hsl(180, 1, .9), chroma.hsl(250, .7, .4)]);\n  };\n\n  chroma.scales.hot = function() {\n    return chroma.scale(['#000', '#f00', '#ff0', '#fff'], [0, .25, .75, 1]).mode('rgb');\n  };\n\n  chroma.analyze = function(data, key, filter) {\n    var add, k, len, o, r, val, visit;\n    r = {\n      min: Number.MAX_VALUE,\n      max: Number.MAX_VALUE * -1,\n      sum: 0,\n      values: [],\n      count: 0\n    };\n    if (filter == null) {\n      filter = function() {\n        return true;\n      };\n    }\n    add = function(val) {\n      if ((val != null) && !isNaN(val)) {\n        r.values.push(val);\n        r.sum += val;\n        if (val < r.min) {\n          r.min = val;\n        }\n        if (val > r.max) {\n          r.max = val;\n        }\n        r.count += 1;\n      }\n    };\n    visit = function(val, k) {\n      if (filter(val, k)) {\n        if ((key != null) && type(key) === 'function') {\n          return add(key(val));\n        } else if ((key != null) && type(key) === 'string' || type(key) === 'number') {\n          return add(val[key]);\n        } else {\n          return add(val);\n        }\n      }\n    };\n    if (type(data) === 'array') {\n      for (o = 0, len = data.length; o < len; o++) {\n        val = data[o];\n        visit(val);\n      }\n    } else {\n      for (k in data) {\n        val = data[k];\n        visit(val, k);\n      }\n    }\n    r.domain = [r.min, r.max];\n    r.limits = function(mode, num) {\n      return chroma.limits(r, mode, num);\n    };\n    return r;\n  };\n\n  chroma.limits = function(data, mode, num) {\n    var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, assignments, best, centroids, cluster, clusterSizes, dist, i, j, kClusters, limits, max_log, min, min_log, mindist, n, nb_iters, newCentroids, o, p, pb, pr, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, repeat, sum, tmpKMeansBreaks, v, value, values, w;\n    if (mode == null) {\n      mode = 'equal';\n    }\n    if (num == null) {\n      num = 7;\n    }\n    if (type(data) === 'array') {\n      data = chroma.analyze(data);\n    }\n    min = data.min;\n    max = data.max;\n    sum = data.sum;\n    values = data.values.sort(function(a, b) {\n      return a - b;\n    });\n    if (num === 1) {\n      return [min, max];\n    }\n    limits = [];\n    if (mode.substr(0, 1) === 'c') {\n      limits.push(min);\n      limits.push(max);\n    }\n    if (mode.substr(0, 1) === 'e') {\n      limits.push(min);\n      for (i = o = 1, ref = num - 1; 1 <= ref ? o <= ref : o >= ref; i = 1 <= ref ? ++o : --o) {\n        limits.push(min + (i / num) * (max - min));\n      }\n      limits.push(max);\n    } else if (mode.substr(0, 1) === 'l') {\n      if (min <= 0) {\n        throw 'Logarithmic scales are only possible for values > 0';\n      }\n      min_log = Math.LOG10E * log(min);\n      max_log = Math.LOG10E * log(max);\n      limits.push(min);\n      for (i = w = 1, ref1 = num - 1; 1 <= ref1 ? w <= ref1 : w >= ref1; i = 1 <= ref1 ? ++w : --w) {\n        limits.push(pow(10, min_log + (i / num) * (max_log - min_log)));\n      }\n      limits.push(max);\n    } else if (mode.substr(0, 1) === 'q') {\n      limits.push(min);\n      for (i = aa = 1, ref2 = num - 1; 1 <= ref2 ? aa <= ref2 : aa >= ref2; i = 1 <= ref2 ? ++aa : --aa) {\n        p = (values.length - 1) * i / num;\n        pb = floor(p);\n        if (pb === p) {\n          limits.push(values[pb]);\n        } else {\n          pr = p - pb;\n          limits.push(values[pb] * (1 - pr) + values[pb + 1] * pr);\n        }\n      }\n      limits.push(max);\n    } else if (mode.substr(0, 1) === 'k') {\n\n      /*\n      implementation based on\n      http://code.google.com/p/figue/source/browse/trunk/figue.js#336\n      simplified for 1-d input values\n       */\n      n = values.length;\n      assignments = new Array(n);\n      clusterSizes = new Array(num);\n      repeat = true;\n      nb_iters = 0;\n      centroids = null;\n      centroids = [];\n      centroids.push(min);\n      for (i = ab = 1, ref3 = num - 1; 1 <= ref3 ? ab <= ref3 : ab >= ref3; i = 1 <= ref3 ? ++ab : --ab) {\n        centroids.push(min + (i / num) * (max - min));\n      }\n      centroids.push(max);\n      while (repeat) {\n        for (j = ac = 0, ref4 = num - 1; 0 <= ref4 ? ac <= ref4 : ac >= ref4; j = 0 <= ref4 ? ++ac : --ac) {\n          clusterSizes[j] = 0;\n        }\n        for (i = ad = 0, ref5 = n - 1; 0 <= ref5 ? ad <= ref5 : ad >= ref5; i = 0 <= ref5 ? ++ad : --ad) {\n          value = values[i];\n          mindist = Number.MAX_VALUE;\n          for (j = ae = 0, ref6 = num - 1; 0 <= ref6 ? ae <= ref6 : ae >= ref6; j = 0 <= ref6 ? ++ae : --ae) {\n            dist = abs(centroids[j] - value);\n            if (dist < mindist) {\n              mindist = dist;\n              best = j;\n            }\n          }\n          clusterSizes[best]++;\n          assignments[i] = best;\n        }\n        newCentroids = new Array(num);\n        for (j = af = 0, ref7 = num - 1; 0 <= ref7 ? af <= ref7 : af >= ref7; j = 0 <= ref7 ? ++af : --af) {\n          newCentroids[j] = null;\n        }\n        for (i = ag = 0, ref8 = n - 1; 0 <= ref8 ? ag <= ref8 : ag >= ref8; i = 0 <= ref8 ? ++ag : --ag) {\n          cluster = assignments[i];\n          if (newCentroids[cluster] === null) {\n            newCentroids[cluster] = values[i];\n          } else {\n            newCentroids[cluster] += values[i];\n          }\n        }\n        for (j = ah = 0, ref9 = num - 1; 0 <= ref9 ? ah <= ref9 : ah >= ref9; j = 0 <= ref9 ? ++ah : --ah) {\n          newCentroids[j] *= 1 / clusterSizes[j];\n        }\n        repeat = false;\n        for (j = ai = 0, ref10 = num - 1; 0 <= ref10 ? ai <= ref10 : ai >= ref10; j = 0 <= ref10 ? ++ai : --ai) {\n          if (newCentroids[j] !== centroids[i]) {\n            repeat = true;\n            break;\n          }\n        }\n        centroids = newCentroids;\n        nb_iters++;\n        if (nb_iters > 200) {\n          repeat = false;\n        }\n      }\n      kClusters = {};\n      for (j = aj = 0, ref11 = num - 1; 0 <= ref11 ? aj <= ref11 : aj >= ref11; j = 0 <= ref11 ? ++aj : --aj) {\n        kClusters[j] = [];\n      }\n      for (i = ak = 0, ref12 = n - 1; 0 <= ref12 ? ak <= ref12 : ak >= ref12; i = 0 <= ref12 ? ++ak : --ak) {\n        cluster = assignments[i];\n        kClusters[cluster].push(values[i]);\n      }\n      tmpKMeansBreaks = [];\n      for (j = al = 0, ref13 = num - 1; 0 <= ref13 ? al <= ref13 : al >= ref13; j = 0 <= ref13 ? ++al : --al) {\n        tmpKMeansBreaks.push(kClusters[j][0]);\n        tmpKMeansBreaks.push(kClusters[j][kClusters[j].length - 1]);\n      }\n      tmpKMeansBreaks = tmpKMeansBreaks.sort(function(a, b) {\n        return a - b;\n      });\n      limits.push(tmpKMeansBreaks[0]);\n      for (i = am = 1, ref14 = tmpKMeansBreaks.length - 1; am <= ref14; i = am += 2) {\n        v = tmpKMeansBreaks[i];\n        if (!isNaN(v) && limits.indexOf(v) === -1) {\n          limits.push(v);\n        }\n      }\n    }\n    return limits;\n  };\n\n  hsi2rgb = function(h, s, i) {\n\n    /*\n    borrowed from here:\n    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp\n     */\n    var args, b, g, r;\n    args = unpack(arguments);\n    h = args[0], s = args[1], i = args[2];\n    if (isNaN(h)) {\n      h = 0;\n    }\n    h /= 360;\n    if (h < 1 / 3) {\n      b = (1 - s) / 3;\n      r = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;\n      g = 1 - (b + r);\n    } else if (h < 2 / 3) {\n      h -= 1 / 3;\n      r = (1 - s) / 3;\n      g = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;\n      b = 1 - (r + g);\n    } else {\n      h -= 2 / 3;\n      g = (1 - s) / 3;\n      b = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;\n      r = 1 - (g + b);\n    }\n    r = limit(i * r * 3);\n    g = limit(i * g * 3);\n    b = limit(i * b * 3);\n    return [r * 255, g * 255, b * 255, args.length > 3 ? args[3] : 1];\n  };\n\n  rgb2hsi = function() {\n\n    /*\n    borrowed from here:\n    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp\n     */\n    var b, g, h, i, min, r, ref, s;\n    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];\n    TWOPI = Math.PI * 2;\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    min = Math.min(r, g, b);\n    i = (r + g + b) / 3;\n    s = 1 - min / i;\n    if (s === 0) {\n      h = 0;\n    } else {\n      h = ((r - g) + (r - b)) / 2;\n      h /= Math.sqrt((r - g) * (r - g) + (r - b) * (g - b));\n      h = Math.acos(h);\n      if (b > g) {\n        h = TWOPI - h;\n      }\n      h /= TWOPI;\n    }\n    return [h * 360, s, i];\n  };\n\n  chroma.hsi = function() {\n    return (function(func, args, ctor) {\n      ctor.prototype = func.prototype;\n      var child = new ctor, result = func.apply(child, args);\n      return Object(result) === result ? result : child;\n    })(Color, slice.call(arguments).concat(['hsi']), function(){});\n  };\n\n  _input.hsi = hsi2rgb;\n\n  Color.prototype.hsi = function() {\n    return rgb2hsi(this._rgb);\n  };\n\n  interpolate_hsx = function(col1, col2, f, m) {\n    var dh, hue, hue0, hue1, lbv, lbv0, lbv1, res, sat, sat0, sat1, xyz0, xyz1;\n    if (m === 'hsl') {\n      xyz0 = col1.hsl();\n      xyz1 = col2.hsl();\n    } else if (m === 'hsv') {\n      xyz0 = col1.hsv();\n      xyz1 = col2.hsv();\n    } else if (m === 'hcg') {\n      xyz0 = col1.hcg();\n      xyz1 = col2.hcg();\n    } else if (m === 'hsi') {\n      xyz0 = col1.hsi();\n      xyz1 = col2.hsi();\n    } else if (m === 'lch' || m === 'hcl') {\n      m = 'hcl';\n      xyz0 = col1.hcl();\n      xyz1 = col2.hcl();\n    }\n    if (m.substr(0, 1) === 'h') {\n      hue0 = xyz0[0], sat0 = xyz0[1], lbv0 = xyz0[2];\n      hue1 = xyz1[0], sat1 = xyz1[1], lbv1 = xyz1[2];\n    }\n    if (!isNaN(hue0) && !isNaN(hue1)) {\n      if (hue1 > hue0 && hue1 - hue0 > 180) {\n        dh = hue1 - (hue0 + 360);\n      } else if (hue1 < hue0 && hue0 - hue1 > 180) {\n        dh = hue1 + 360 - hue0;\n      } else {\n        dh = hue1 - hue0;\n      }\n      hue = hue0 + f * dh;\n    } else if (!isNaN(hue0)) {\n      hue = hue0;\n      if ((lbv1 === 1 || lbv1 === 0) && m !== 'hsv') {\n        sat = sat0;\n      }\n    } else if (!isNaN(hue1)) {\n      hue = hue1;\n      if ((lbv0 === 1 || lbv0 === 0) && m !== 'hsv') {\n        sat = sat1;\n      }\n    } else {\n      hue = Number.NaN;\n    }\n    if (sat == null) {\n      sat = sat0 + f * (sat1 - sat0);\n    }\n    lbv = lbv0 + f * (lbv1 - lbv0);\n    return res = chroma[m](hue, sat, lbv);\n  };\n\n  _interpolators = _interpolators.concat((function() {\n    var len, o, ref, results;\n    ref = ['hsv', 'hsl', 'hsi', 'hcl', 'lch', 'hcg'];\n    results = [];\n    for (o = 0, len = ref.length; o < len; o++) {\n      m = ref[o];\n      results.push([m, interpolate_hsx]);\n    }\n    return results;\n  })());\n\n  interpolate_num = function(col1, col2, f, m) {\n    var n1, n2;\n    n1 = col1.num();\n    n2 = col2.num();\n    return chroma.num(n1 + (n2 - n1) * f, 'num');\n  };\n\n  _interpolators.push(['num', interpolate_num]);\n\n  interpolate_lab = function(col1, col2, f, m) {\n    var res, xyz0, xyz1;\n    xyz0 = col1.lab();\n    xyz1 = col2.lab();\n    return res = new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);\n  };\n\n  _interpolators.push(['lab', interpolate_lab]);\n\n}).call(this);\n","module.exports = require(\"react\");"],"sourceRoot":""}